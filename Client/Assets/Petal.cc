#include <Client/Assets/Assets.hh>

#include <Client/StaticData.hh>

#include <Shared/Helpers.hh>

#include <cmath>

void draw_static_petal_single(PetalID::T id, Renderer &ctx) {
    float r = PETAL_DATA[id].radius;
    switch(id) {
        case PetalID::kNone:
            break;
        case PetalID::kDandelion:
            ctx.set_stroke(0xff222222);
            ctx.round_line_cap();
            ctx.set_line_width(7);
            ctx.begin_path();
            ctx.move_to(0,0);
            ctx.line_to(-1.6 * r, 0);
            ctx.stroke();
        case PetalID::kUniqueBasic:
        case PetalID::kBasic:
        case PetalID::kLight:
        case PetalID::kTwin:
        case PetalID::kTriplet:
        case PetalID::kQuint:
            ctx.set_fill(0xffffffff);
            ctx.set_stroke(0xffcfcfcf);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.arc(0,0,r);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kHeavy:
            ctx.set_fill(0xffaaaaaa);
            ctx.set_stroke(0xff888888);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.arc(0,0,r);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kStinger: {
        case PetalID::kTringer:
            ctx.set_fill(0xff333333);
            ctx.set_stroke(0xff292929);
            ctx.set_line_width(3);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.begin_path();
            ctx.move_to(r,0);
            ctx.line_to(-r*0.5,r*0.866);
            ctx.line_to(-r*0.5,-r*0.866);
            ctx.line_to(r,0);
            ctx.fill();
            ctx.stroke();
            break;
        }
        case PetalID::kLeaf:
        case PetalID::kDuoLeaf:
            ctx.set_fill(0xff39b54a);
            ctx.set_stroke(0xff2e933c);
            ctx.set_line_width(3);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.begin_path();
            ctx.move_to(-20, 0);
            ctx.line_to(-15, 0);
            ctx.bcurve_to(-10,-12,5,-12,15,0);
            ctx.bcurve_to(5,12,-10,12,-15,0);
            ctx.fill();
            ctx.stroke();
            ctx.begin_path();
            ctx.move_to(-9,0);
            ctx.qcurve_to(0,-1.5,7.5,0);
            ctx.stroke();
            break;
        case PetalID::kRose:
        case PetalID::kDahlia:
            ctx.set_fill(0xffff94c9);
            ctx.set_stroke(0xffcf78a3);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.arc(0,0,r);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kAntEgg:
            ctx.set_stroke(0xffcfc295);
            ctx.set_fill(0xfffff0b8);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.arc(0,0,r);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kBeetleEgg:
            ctx.begin_path();
            ctx.ellipse(0,0,r * 0.85, r * 1.15);
            ctx.set_fill(0xfffff0b8);
            ctx.fill();
            ctx.set_stroke(0xffcfc295);
            ctx.set_line_width(3);
            ctx.stroke();
            break;
        case PetalID::kMissile:
            ctx.scale(r / 10);
            ctx.set_fill(0xff222222);
            ctx.set_stroke(0xff222222);
            ctx.set_line_width(5.0);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.begin_path();
            ctx.move_to(11.0, 0.0);
            ctx.line_to(-11.0, -6.0);
            ctx.line_to(-11.0, 6.0);
            ctx.line_to(11.0, 0.0);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kIris:
            ctx.set_fill(0xffce76db);
            ctx.set_stroke(0xffa760b1);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.arc(0,0,r);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kPollen:
            ctx.set_fill(0xffffe763);
            ctx.set_stroke(0xffcfbb50);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.arc(0,0,r);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kBubble:
            ctx.begin_path();
            ctx.arc(0,0,r);
            ctx.set_stroke(0xb2ffffff);
            ctx.set_line_width(3);
            ctx.stroke();
            ctx.begin_path();
            ctx.arc(0,0,r-1.5);
            ctx.set_fill(0x59ffffff);
            ctx.fill();
            ctx.begin_path();
            ctx.arc(r/3,-r/3,r/4);
            ctx.set_fill(0x59ffffff);
            ctx.fill();
            break;
        case PetalID::kFaster:
            ctx.set_fill(0xfffeffc9);
            ctx.set_stroke(0xffcecfa3);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.arc(0,0,r);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kThirdEye:
            ctx.scale(0.5);
            ctx.set_fill(0xff111111);
            ctx.begin_path();
            ctx.move_to(0,-10);
            ctx.qcurve_to(8,0,0,10);
            ctx.qcurve_to(-8,0,0,-10);
            ctx.fill();
            ctx.set_fill(0xffeeeeee);
            ctx.begin_path();
            ctx.arc(0, 0, 5);
            ctx.fill();
            ctx.set_stroke(0xff111111);
            ctx.set_line_width(1.5);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.begin_path();
            ctx.move_to(0,-10);
            ctx.qcurve_to(8,0,0,10);
            ctx.qcurve_to(-8,0,0,-10);
            ctx.stroke();
            break;
        case PetalID::kWeb:
        case PetalID::kTriweb:
            ctx.set_fill(0xffffffff);
            ctx.set_stroke(0xffcfcfcf);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.move_to(11.00, 0.00);
            ctx.qcurve_to(4.32, 3.14, 3.40, 10.46);
            ctx.qcurve_to(-1.65, 5.08, -8.90, 6.47);
            ctx.qcurve_to(-5.34, -0.00, -8.90, -6.47);
            ctx.qcurve_to(-1.65, -5.08, 3.40, -10.46);
            ctx.qcurve_to(4.32, -3.14, 11.00, 0.00);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kWing:
        case PetalID::kTriWing:
            ctx.begin_path();
            ctx.partial_arc(0,0,15,-1.5707963267948966,1.5707963267948966,0);
            ctx.qcurve_to(10,0,0,-15);
            ctx.set_fill(0xffffffff);
            ctx.fill();
            ctx.set_stroke(0xffcfcfcf);
            ctx.set_line_width(3);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.stroke();
            break;
        case PetalID::kRock: {
            ctx.set_fill(0xff777777);
            ctx.set_stroke(Renderer::HSV(0xff777777, 0.8));
            ctx.set_line_width(3);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.begin_path();
            ctx.move_to(12.138091087341309,0);
            ctx.line_to(3.8414306640625,12.377452850341797);
            ctx.line_to(-11.311542510986328,7.916932582855225);
            ctx.line_to(-11.461170196533203,-7.836822032928467);
            ctx.line_to(4.538298606872559,-13.891617774963379);
            ctx.line_to(12.138091087341309,0);
            ctx.close_path();
            ctx.fill();
            ctx.stroke();
            break;
        }
        case PetalID::kAntennae: {
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.set_stroke(0xff333333);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.move_to(5, 12.5);
            ctx.qcurve_to(10, -2.5, 15, -12.5);
            ctx.qcurve_to(5, -2.5, 5, 12.5);
            ctx.move_to(-5, 12.5);
            ctx.qcurve_to(-10, -2.5, -15, -12.5);
            ctx.qcurve_to(-5, -2.5, -5, 12.5);
            ctx.fill();
            ctx.stroke();
            break;
        }
        case PetalID::kObserver: {
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.set_stroke(0xff333333);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.move_to(5, 12.5);
            ctx.qcurve_to(10, -2.5, 15, -12.5);
            ctx.qcurve_to(5, -2.5, 5, 12.5);
            ctx.move_to(-5, 12.5);
            ctx.qcurve_to(-10, -2.5, -15, -12.5);
            ctx.qcurve_to(-5, -2.5, -5, 12.5);
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xffd01c1d);
            ctx.begin_path();
            ctx.arc(15, -12.5, 2.5);
            ctx.close_path();
            ctx.arc(-15, -12.5, 2.5);
            ctx.close_path();
            ctx.fill();
            break;
        }
        case PetalID::kBlueIris:
            ctx.set_fill(0xff39e9f1);
            ctx.set_stroke(0xff2dbac0);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.arc(0,0,r);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kCactus:
        case PetalID::kTricac:
            ctx.set_fill(0xff38c75f);
            ctx.set_stroke(Renderer::HSV(0xff38c75f, 0.8));
            ctx.set_line_width(3);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.begin_path();
            ctx.move_to(15,0);
            for (uint32_t i = 0; i < 8; ++i) {
                float base_angle = M_PI * 2 * i / 8;
                ctx.qcurve_to(15*0.8*cosf(base_angle+M_PI/8),15*0.8*sinf(base_angle+M_PI/8),15*cosf(base_angle+2*M_PI/8),15*sinf(base_angle+2*M_PI/8));
            }
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xff74d68f);
            ctx.begin_path();
            ctx.arc(0,0,8);
            ctx.fill();
            break;
        case PetalID::kPoisonPeas:
        case PetalID::kPoisonPeas2:
            ctx.set_fill(0xffce76db);
            ctx.set_stroke(0xffa760b1);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.arc(0,0,PETAL_DATA[id].radius);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kPeas:
            ctx.set_fill(0xff8ac255);
            ctx.set_stroke(0xff709d45);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.arc(0,0,PETAL_DATA[id].radius);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kSand:
            ctx.set_fill(0xffe0c85c);
            ctx.set_stroke(0xffb5a24b);
            ctx.set_line_width(3);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.begin_path();
            ctx.move_to(7,0);
            ctx.line_to(3.499999761581421,6.062178134918213);
            ctx.line_to(-3.500000476837158,6.062177658081055);
            ctx.line_to(-7,-6.119594218034763e-7);
            ctx.line_to(-3.4999992847442627,-6.062178134918213);
            ctx.line_to(3.4999992847442627,-6.062178134918213);
            ctx.close_path();
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kStick:
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.set_line_width(7);
            ctx.set_stroke(0xff654a19);
            ctx.begin_path();
            ctx.move_to(0,10);
            ctx.line_to(0,0);
            ctx.line_to(4,-7);
            ctx.move_to(0,0);
            ctx.line_to(-6,-10);
            ctx.stroke();
            ctx.set_line_width(3);
            ctx.set_stroke(0xff7d5b1f);
            ctx.stroke();
            break;
        case PetalID::kPincer:
            ctx.set_fill(0xff333333);
            ctx.set_stroke(0xff292929);
            ctx.set_line_width(3);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.begin_path();
            ctx.move_to(10,5);
            ctx.qcurve_to(4,-14,-10,5);
            ctx.qcurve_to(4,0,10,5);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kAzalea:
        case PetalID::kTriAzalea: {
            ctx.set_fill(0xffff94c9);
            ctx.set_stroke(0xffcf78a3);
            ctx.set_line_width(3);
            ctx.begin_path();
            uint32_t s = 3;
            ctx.move_to(r, 0);
            for (uint32_t i = 1; i <= s; ++i) {
                float angle = i * 2 * M_PI / s;
                float angle2 = angle - M_PI / s;
                ctx.qcurve_to(2 * r * cosf(angle2), 2 * r * sinf(angle2), r * cosf(angle), r * sinf(angle));
            }
            ctx.fill();
            ctx.stroke();
            break;
        }
        case PetalID::kPoisonCactus:
            ctx.set_fill(0xffce76db);
            ctx.set_stroke(0xffa760b1);
            ctx.set_line_width(3);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.begin_path();
            ctx.move_to(15,0);
            for (uint32_t i = 0; i < 8; ++i) {
                float base_angle = M_PI * 2 * i / 8;
                ctx.qcurve_to(15*0.8*cosf(base_angle+M_PI/8),15*0.8*sinf(base_angle+M_PI/8),15*cosf(base_angle+2*M_PI/8),15*sinf(base_angle+2*M_PI/8));
            }
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xffcea0db);
            ctx.begin_path();
            ctx.arc(0,0,8);
            ctx.fill();
            break;
        case PetalID::kSalt:
            ctx.set_fill(0xffffffff);
            ctx.set_stroke(0xffcfcfcf);
            ctx.set_line_width(3);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.begin_path();
            ctx.move_to(10.404077529907227,0);
            ctx.line_to(6.643442630767822,8.721502304077148);
            ctx.line_to(-2.6667866706848145,11.25547981262207);
            ctx.line_to(-10.940428733825684,4.95847225189209);
            ctx.line_to(-11.341578483581543,-5.432167053222656);
            ctx.line_to(-2.4972469806671143,-11.472168922424316);
            ctx.line_to(7.798409461975098,-9.584606170654297);
            ctx.line_to(10.404077529907227,0);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kSquare:
            ctx.set_fill(0xffffe869);
            ctx.set_stroke(0xffcfbc55);
            ctx.set_line_width(0.15*r);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.begin_path();
            ctx.rect(-r * 0.707, -r * 0.707, r * 1.414, r * 1.414);
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kMoon: {
            ctx.set_fill(0xff878787);
            ctx.set_stroke(0xff6d6d6d);
            ctx.set_line_width(5);
            ctx.begin_path();
            ctx.arc(0,0,r);
            ctx.stroke();
            ctx.fill();
            ctx.clip();
            SeedGenerator gen(id * 274633 + 284562);
            uint32_t ct = 10;
            ctx.set_fill(0xff999999);
            ctx.set_stroke(0xff7c7c7c);
            ctx.set_line_width(3);
            ctx.begin_path();
            for (uint32_t i = 0; i < ct; ++i) {
                float _x = gen.binext() * (r + 10);
                float _y = gen.binext() * (r + 10);
                float _r = gen.binext() * 10 + 10;
                ctx.move_to(_x,_y);
                ctx.arc(_x,_y,_r);
            }
            ctx.stroke();
            ctx.fill(1);
            break;
        }
        case PetalID::kLotus:
            ctx.scale(r / 10);
            ctx.set_fill(0xffce76db);
            ctx.set_stroke(0xffa760b1);
            ctx.set_line_width(2);
            ctx.round_line_cap();
            ctx.round_line_join();
            ctx.begin_path();
            ctx.move_to(0.00, -10.00);
            ctx.bcurve_to(1.44, -7.11, 2.05, -5.89, 1.83, -4.41);
            ctx.bcurve_to(2.72, -5.62, 4.01, -6.05, 7.07, -7.07);
            ctx.bcurve_to(6.05, -4.01, 5.62, -2.72, 4.41, -1.83);
            ctx.bcurve_to(5.89, -2.05, 7.11, -1.44, 10.00, 0.00);
            ctx.bcurve_to(7.11, 1.44, 5.89, 2.05, 4.41, 1.83);
            ctx.bcurve_to(5.62, 2.72, 6.05, 4.01, 7.07, 7.07);
            ctx.bcurve_to(4.01, 6.05, 2.72, 5.62, 1.83, 4.41);
            ctx.bcurve_to(2.05, 5.89, 1.44, 7.11, 0.00, 10.00);
            ctx.bcurve_to(-1.44, 7.11, -2.05, 5.89, -1.83, 4.41);
            ctx.bcurve_to(-2.72, 5.62, -4.01, 6.05, -7.07, 7.07);
            ctx.bcurve_to(-6.05, 4.01, -5.62, 2.72, -4.41, 1.83);
            ctx.bcurve_to(-5.89, 2.05, -7.11, 1.44, -10.00, 0.00);
            ctx.bcurve_to(-7.11, -1.44, -5.89, -2.05, -4.41, -1.83);
            ctx.bcurve_to(-5.62, -2.72, -6.05, -4.01, -7.07, -7.07);
            ctx.bcurve_to(-4.01, -6.05, -2.72, -5.62, -1.83, -4.41);
            ctx.bcurve_to(-2.05, -5.89, -1.44, -7.11, 0.00, -10.00);
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xffa760b1);
            ctx.begin_path();
            ctx.arc(0,0,1.74);
            ctx.fill();
            break;
        case PetalID::kHeaviest:
            ctx.begin_path();
            ctx.arc(0,0,16);
            ctx.set_fill(0xff333333);
            ctx.fill();
            ctx.set_stroke(0xff292929);
            ctx.set_line_width(3);
            ctx.stroke();
            ctx.begin_path();
            ctx.arc(6,-6,4.6);
            ctx.set_fill(0xffcccccc);
            ctx.fill();
            break;
        case PetalID::kCutter:
            ctx.set_fill(0xff111111);
            ctx.begin_path();
            ctx.arc(0,0,25);
            ctx.move_to(24.748737335205078,24.748737335205078);
            ctx.qcurve_to(9.899494171142578,23.899494171142578,-0.0000015298985545086907,35);
            ctx.qcurve_to(-9.899496078491211,23.899494171142578,-24.748737335205078,24.748737335205078);
            ctx.qcurve_to(-23.899494171142578,9.899493217468262,-35,-0.0000030597971090173814);
            ctx.qcurve_to(-23.89949607849121,-9.899496078491211,-24.74873924255371,-24.748735427856445);
            ctx.qcurve_to(-9.899496078491211,-23.899494171142578,4.173708134658227e-7,-35);
            ctx.qcurve_to(9.899493217468262,-23.89949607849121,24.748733520507812,-24.748741149902344);
            ctx.qcurve_to(23.899494171142578,-9.899494171142578,35,0.000006119594218034763);
            ctx.qcurve_to(23.899494171142578,9.899497032165527,24.748737335205078,24.748737335205078);
            ctx.fill();
            break;
        case PetalID::kYinYang:
            ctx.set_line_width(3);
            ctx.set_fill(0xffffffff);
            ctx.set_stroke(0xffcfcfcf);
            ctx.begin_path();
            ctx.partial_arc(0,0,r,M_PI/2,3*M_PI/2,0);
            ctx.partial_arc(0,-r/2,r/2,-M_PI/2,M_PI/2,0);
            ctx.partial_arc(0,r/2,r/2,-M_PI/2,M_PI/2,1);
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xff333333);
            ctx.set_stroke(0xff292929);
            ctx.begin_path();
            ctx.partial_arc(0,0,r,-M_PI/2,M_PI/2,0);
            ctx.partial_arc(0,r/2,r/2,M_PI/2,3*M_PI/2,0);
            ctx.partial_arc(0,-r/2,r/2,M_PI/2,3*M_PI/2,1);
            ctx.fill();
            ctx.stroke();
            ctx.set_stroke(0xffcfcfcf);
            ctx.begin_path();
            ctx.partial_arc(0,0,r,M_PI,3*M_PI/2,0);
            ctx.partial_arc(0,-r/2,r/2,-M_PI/2,M_PI/2,0);
            ctx.stroke();
            break;
        case PetalID::kYggdrasil:
            ctx.scale(r / 255);
            ctx.set_fill(0xff886d35);
            ctx.begin_path();
            ctx.move_to(-273.54, -218.49);
            ctx.qcurve_to(-284.88, -187.49, -267.08, -151.41);
            ctx.qcurve_to(-262.72, -142.57, -254.82, -136.69);
            ctx.qcurve_to(-246.93, -130.80, -237.22, -129.15);
            ctx.qcurve_to(-222.87, -126.71, -208.62, -122.97);
            ctx.qcurve_to(-212.49, -112.19, -216.13, -100.75);
            ctx.qcurve_to(-218.33, -96.85, -219.63, -92.56);
            ctx.qcurve_to(-220.93, -88.27, -221.28, -83.80);
            ctx.qcurve_to(-229.91, -54.12, -240.77, -7.55);
            ctx.qcurve_to(-244.62, 8.97, -235.66, 23.37);
            ctx.qcurve_to(-226.71, 37.78, -210.19, 41.64);
            ctx.line_to(-199.07, 44.23);
            ctx.line_to(-203.90, 73.81);
            ctx.qcurve_to(-203.91, 73.87, -203.91, 73.93);
            ctx.qcurve_to(-203.92, 73.98, -203.93, 74.04);
            ctx.qcurve_to(-205.20, 82.09, -203.29, 90.01);
            ctx.qcurve_to(-201.38, 97.93, -196.58, 104.52);
            ctx.qcurve_to(-191.79, 111.10, -184.84, 115.35);
            ctx.qcurve_to(-177.88, 119.60, -169.84, 120.87);
            ctx.line_to(-168.30, 121.11);
            ctx.line_to(-169.08, 125.06);
            ctx.qcurve_to(-169.09, 125.10, -169.10, 125.14);
            ctx.qcurve_to(-169.11, 125.18, -169.11, 125.22);
            ctx.qcurve_to(-170.67, 133.22, -169.04, 141.20);
            ctx.qcurve_to(-167.42, 149.18, -162.86, 155.94);
            ctx.qcurve_to(-158.30, 162.69, -151.51, 167.19);
            ctx.qcurve_to(-144.72, 171.69, -136.72, 173.24);
            ctx.line_to(-118.37, 176.80);
            ctx.qcurve_to(-118.31, 176.82, -118.25, 176.83);
            ctx.qcurve_to(-118.18, 176.84, -118.12, 176.85);
            ctx.qcurve_to(-117.31, 178.64, -116.33, 180.35);
            ctx.qcurve_to(-115.35, 182.05, -114.21, 183.65);
            ctx.qcurve_to(-109.49, 190.30, -102.59, 194.63);
            ctx.qcurve_to(-95.69, 198.96, -87.66, 200.32);
            ctx.line_to(-69.22, 203.45);
            ctx.qcurve_to(-68.74, 203.53, -68.27, 203.60);
            ctx.qcurve_to(-67.79, 203.67, -67.31, 203.73);
            ctx.qcurve_to(-63.19, 213.00, -55.22, 219.27);
            ctx.qcurve_to(-47.25, 225.55, -37.27, 227.38);
            ctx.line_to(-18.90, 230.76);
            ctx.qcurve_to(-14.56, 231.55, -10.15, 231.41);
            ctx.qcurve_to(-5.73, 231.26, -1.46, 230.18);
            ctx.qcurve_to(2.41, 233.19, 6.88, 235.20);
            ctx.qcurve_to(11.34, 237.21, 16.16, 238.11);
            ctx.line_to(34.53, 241.54);
            ctx.qcurve_to(34.57, 241.55, 34.60, 241.56);
            ctx.qcurve_to(34.64, 241.56, 34.68, 241.57);
            ctx.qcurve_to(37.13, 242.02, 39.62, 242.17);
            ctx.qcurve_to(42.11, 242.32, 44.60, 242.16);
            ctx.qcurve_to(50.12, 249.01, 57.96, 252.99);
            ctx.qcurve_to(65.80, 256.97, 74.58, 257.39);
            ctx.line_to(93.24, 258.26);
            ctx.qcurve_to(94.95, 258.34, 96.66, 258.28);
            ctx.qcurve_to(98.37, 258.21, 100.07, 258.01);
            ctx.qcurve_to(105.67, 262.39, 112.42, 264.63);
            ctx.qcurve_to(119.17, 266.87, 126.27, 266.70);
            ctx.line_to(144.96, 266.26);
            ctx.line_to(144.99, 266.26);
            ctx.qcurve_to(146.79, 266.22, 148.59, 266.01);
            ctx.qcurve_to(150.38, 265.81, 152.15, 265.45);
            ctx.qcurve_to(158.42, 269.45, 165.70, 270.98);
            ctx.qcurve_to(172.97, 272.52, 180.32, 271.40);
            ctx.line_to(198.79, 268.59);
            ctx.line_to(198.83, 268.58);
            ctx.qcurve_to(215.60, 266.01, 225.64, 252.34);
            ctx.qcurve_to(235.68, 238.66, 233.11, 221.89);
            ctx.qcurve_to(232.88, 220.35, 232.63, 218.81);
            ctx.line_to(248.18, 211.12);
            ctx.line_to(248.21, 211.11);
            ctx.qcurve_to(263.41, 203.59, 268.84, 187.51);
            ctx.qcurve_to(274.27, 171.44, 266.74, 156.23);
            ctx.qcurve_to(262.68, 148.04, 257.67, 140.39);
            ctx.qcurve_to(258.08, 139.88, 258.48, 139.35);
            ctx.qcurve_to(258.87, 138.83, 259.25, 138.29);
            ctx.line_to(269.93, 122.97);
            ctx.qcurve_to(277.99, 111.43, 277.25, 97.36);
            ctx.qcurve_to(276.50, 83.30, 267.27, 72.67);
            ctx.qcurve_to(267.91, 71.51, 268.47, 70.30);
            ctx.qcurve_to(269.04, 69.10, 269.52, 67.86);
            ctx.line_to(276.33, 50.46);
            ctx.line_to(276.35, 50.40);
            ctx.qcurve_to(279.31, 42.81, 279.14, 34.67);
            ctx.qcurve_to(278.97, 26.52, 275.69, 19.06);
            ctx.qcurve_to(272.55, 11.90, 266.98, 6.40);
            ctx.qcurve_to(261.41, 0.89, 254.21, -2.17);
            ctx.qcurve_to(254.51, -3.41, 254.73, -4.66);
            ctx.qcurve_to(254.96, -5.92, 255.10, -7.18);
            ctx.line_to(257.23, -25.75);
            ctx.qcurve_to(258.22, -34.46, 255.57, -42.82);
            ctx.qcurve_to(252.91, -51.18, 247.06, -57.71);
            ctx.qcurve_to(247.37, -59.47, 247.53, -61.25);
            ctx.qcurve_to(247.68, -63.03, 247.68, -64.81);
            ctx.line_to(247.68, -83.54);
            ctx.qcurve_to(247.67, -96.77, 239.92, -107.49);
            ctx.qcurve_to(232.17, -118.21, 219.62, -122.38);
            ctx.line_to(219.52, -129.09);
            ctx.qcurve_to(219.26, -146.05, 207.09, -157.86);
            ctx.qcurve_to(194.92, -169.68, 177.96, -169.43);
            ctx.qcurve_to(172.94, -169.35, 167.85, -169.16);
            ctx.line_to(167.84, -169.31);
            ctx.line_to(167.84, -169.34);
            ctx.qcurve_to(167.26, -186.29, 154.87, -197.87);
            ctx.qcurve_to(142.47, -209.45, 125.51, -208.88);
            ctx.qcurve_to(117.74, -208.61, 109.85, -208.00);
            ctx.qcurve_to(106.05, -222.95, 93.34, -231.68);
            ctx.qcurve_to(80.63, -240.40, 65.31, -238.58);
            ctx.qcurve_to(45.33, -236.20, 25.95, -232.73);
            ctx.qcurve_to(22.07, -247.33, 9.63, -255.91);
            ctx.qcurve_to(-2.81, -264.48, -17.83, -262.93);
            ctx.qcurve_to(-44.96, -260.13, -75.59, -250.78);
            ctx.qcurve_to(-79.88, -250.32, -83.97, -248.97);
            ctx.qcurve_to(-88.07, -247.62, -91.80, -245.44);
            ctx.qcurve_to(-103.36, -241.40, -116.91, -235.99);
            ctx.qcurve_to(-150.38, -254.09, -185.96, -269.59);
            ctx.qcurve_to(-192.91, -272.62, -200.49, -272.95);
            ctx.qcurve_to(-208.07, -273.29, -215.27, -270.89);
            ctx.qcurve_to(-216.07, -270.62, -216.85, -270.33);
            ctx.qcurve_to(-217.64, -270.03, -218.41, -269.70);
            ctx.qcurve_to(-261.32, -251.90, -273.54, -218.49);
            ctx.fill();
            ctx.set_fill(0xffa88642);
            ctx.begin_path();
            ctx.move_to(-230.34, -169.53);
            ctx.bcurve_to(-242.75, -194.66, -239.90, -216.60, -202.31, -232.03);
            ctx.line_to(-202.31, -232.03);
            ctx.bcurve_to(-175.35, -220.29, -147.49, -206.55, -119.56, -190.60);
            ctx.bcurve_to(-103.63, -197.35, -87.58, -203.79, -71.38, -209.13);
            ctx.line_to(-71.16, -210.06);
            ctx.bcurve_to(-70.64, -209.95, -70.14, -209.84, -69.63, -209.72);
            ctx.bcurve_to(-51.16, -215.71, -32.51, -220.24, -13.63, -222.19);
            ctx.line_to(-11.69, -203.60);
            ctx.bcurve_to(-18.65, -202.88, -25.65, -201.75, -32.69, -200.28);
            ctx.bcurve_to(-18.86, -196.28, -5.65, -191.88, 6.97, -187.13);
            ctx.bcurve_to(28.05, -191.87, 49.12, -195.40, 70.16, -197.91);
            ctx.line_to(72.38, -179.35);
            ctx.bcurve_to(60.85, -177.97, 49.33, -176.28, 37.81, -174.25);
            ctx.bcurve_to(47.45, -169.82, 56.68, -165.19, 65.50, -160.31);
            ctx.bcurve_to(85.48, -164.46, 105.90, -167.22, 126.91, -167.94);
            ctx.line_to(127.53, -149.28);
            ctx.bcurve_to(114.77, -148.85, 102.19, -147.59, 89.72, -145.69);
            ctx.bcurve_to(100.48, -138.62, 110.54, -131.19, 119.88, -123.44);
            ctx.bcurve_to(139.03, -126.34, 158.55, -128.18, 178.56, -128.47);
            ctx.line_to(178.85, -109.78);
            ctx.bcurve_to(165.10, -109.58, 151.54, -108.61, 138.13, -107.03);
            ctx.bcurve_to(146.65, -98.70, 154.45, -90.07, 161.53, -81.16);
            ctx.bcurve_to(176.57, -82.67, 191.64, -83.48, 206.72, -83.50);
            ctx.line_to(206.72, -64.81);
            ctx.bcurve_to(195.94, -64.80, 185.15, -64.36, 174.35, -63.53);
            ctx.bcurve_to(178.70, -57.00, 182.72, -50.36, 186.38, -43.59);
            ctx.bcurve_to(188.32, -39.99, 190.16, -36.35, 191.91, -32.68);
            ctx.bcurve_to(200.12, -32.12, 208.33, -31.35, 216.53, -30.40);
            ctx.line_to(214.41, -11.84);
            ctx.bcurve_to(209.66, -12.39, 204.90, -12.86, 200.16, -13.28);
            ctx.bcurve_to(204.99, -0.35, 208.65, 12.87, 211.19, 26.25);
            ctx.bcurve_to(220.15, 28.94, 229.14, 32.00, 238.19, 35.53);
            ctx.line_to(231.38, 52.94);
            ctx.bcurve_to(225.61, 50.69, 219.89, 48.60, 214.19, 46.72);
            ctx.bcurve_to(215.56, 59.97, 215.87, 73.34, 215.16, 86.75);
            ctx.bcurve_to(222.29, 90.45, 229.37, 94.66, 236.35, 99.53);
            ctx.line_to(225.66, 114.84);
            ctx.bcurve_to(221.59, 112.00, 217.47, 109.40, 213.31, 107.00);
            ctx.bcurve_to(211.78, 118.85, 209.49, 130.70, 206.41, 142.47);
            ctx.bcurve_to(215.97, 151.68, 224.08, 162.38, 230.03, 174.41);
            ctx.line_to(213.28, 182.69);
            ctx.bcurve_to(209.82, 175.69, 205.38, 169.15, 200.19, 163.16);
            ctx.bcurve_to(196.27, 174.68, 191.60, 186.11, 186.25, 197.37);
            ctx.bcurve_to(188.93, 207.61, 191.06, 217.85, 192.63, 228.09);
            ctx.line_to(174.16, 230.91);
            ctx.bcurve_to(172.83, 222.25, 171.08, 213.58, 168.91, 204.91);
            ctx.bcurve_to(160.54, 204.65, 152.23, 204.20, 144.00, 203.56);
            ctx.bcurve_to(143.81, 210.75, 143.82, 218.00, 144.00, 225.31);
            ctx.line_to(125.31, 225.75);
            ctx.bcurve_to(125.12, 217.76, 125.12, 209.77, 125.34, 201.81);
            ctx.bcurve_to(115.61, 200.71, 106.02, 199.31, 96.53, 197.66);
            ctx.bcurve_to(95.94, 204.19, 95.46, 210.76, 95.16, 217.34);
            ctx.line_to(76.50, 216.47);
            ctx.bcurve_to(76.85, 208.96, 77.40, 201.51, 78.09, 194.10);
            ctx.bcurve_to(66.82, 191.67, 55.75, 188.82, 44.94, 185.60);
            ctx.bcurve_to(43.99, 190.82, 43.04, 196.05, 42.06, 201.28);
            ctx.line_to(23.69, 197.84);
            ctx.bcurve_to(24.80, 191.86, 25.88, 185.85, 26.97, 179.84);
            ctx.bcurve_to(15.32, 175.79, 3.99, 171.23, -6.97, 166.22);
            ctx.bcurve_to(-8.51, 174.30, -10.01, 182.39, -11.50, 190.47);
            ctx.line_to(-29.88, 187.10);
            ctx.bcurve_to(-28.07, 177.30, -26.25, 167.49, -24.38, 157.69);
            ctx.bcurve_to(-36.05, 151.58, -47.24, 144.90, -57.91, 137.63);
            ctx.bcurve_to(-59.44, 146.09, -60.93, 154.57, -62.38, 163.06);
            ctx.line_to(-80.81, 159.94);
            ctx.bcurve_to(-78.85, 148.41, -76.80, 136.89, -74.66, 125.38);
            ctx.bcurve_to(-84.83, 117.40, -94.38, 108.82, -103.31, 99.66);
            ctx.bcurve_to(-105.78, 111.96, -108.18, 124.28, -110.56, 136.59);
            ctx.line_to(-128.91, 133.03);
            ctx.bcurve_to(-125.64, 116.14, -122.30, 99.24, -118.84, 82.31);
            ctx.bcurve_to(-126.58, 72.92, -133.71, 63.02, -140.13, 52.59);
            ctx.bcurve_to(-141.79, 62.81, -143.39, 73.06, -145.00, 83.31);
            ctx.line_to(-163.47, 80.41);
            ctx.bcurve_to(-160.61, 62.22, -157.70, 43.99, -154.56, 25.78);
            ctx.bcurve_to(-162.84, 8.07, -169.33, -10.85, -173.78, -30.97);
            ctx.bcurve_to(-176.87, -18.73, -179.80, -6.39, -182.69, 6.00);
            ctx.line_to(-200.88, 1.75);
            ctx.bcurve_to(-194.65, -24.93, -188.20, -51.67, -180.28, -78.00);
            ctx.bcurve_to(-180.34, -78.89, -180.39, -79.77, -180.44, -80.66);
            ctx.line_to(-179.47, -80.72);
            ctx.bcurve_to(-172.47, -103.66, -164.33, -126.26, -154.19, -148.19);
            ctx.bcurve_to(-179.16, -158.00, -204.57, -165.14, -230.34, -169.53);
            ctx.move_to(-25.91, -178.72);
            ctx.bcurve_to(-39.40, -182.96, -53.58, -186.83, -68.44, -190.28);
            ctx.line_to(-68.44, -190.28);
            ctx.bcurve_to(-78.68, -186.81, -89.00, -182.86, -99.38, -178.66);
            ctx.bcurve_to(-90.90, -173.48, -82.42, -168.10, -74.00, -162.50);
            ctx.bcurve_to(-57.97, -168.72, -41.93, -174.11, -25.91, -178.72);
            ctx.move_to(5.64, -167.66);
            ctx.bcurve_to(5.64, -167.66, 5.63, -167.65, 5.63, -167.66);
            ctx.line_to(5.63, -167.66);
            ctx.bcurve_to(-14.67, -162.88, -34.94, -156.89, -55.22, -149.56);
            ctx.bcurve_to(-46.91, -143.66, -38.64, -137.56, -30.47, -131.22);
            ctx.bcurve_to(-8.04, -139.55, 14.63, -147.37, 37.84, -153.66);
            ctx.bcurve_to(27.65, -158.60, 16.92, -163.27, 5.66, -167.66);
            ctx.bcurve_to(5.65, -167.66, 5.65, -167.66, 5.64, -167.66);
            ctx.move_to(-136.94, -140.94);
            ctx.bcurve_to(-146.66, -119.98, -154.57, -98.17, -161.41, -75.81);
            ctx.bcurve_to(-159.70, -51.76, -155.24, -29.33, -148.31, -8.53);
            ctx.bcurve_to(-140.32, -49.57, -130.31, -90.46, -115.69, -130.75);
            ctx.bcurve_to(-122.72, -134.37, -129.82, -137.76, -136.94, -140.94);
            ctx.move_to(95.19, -119.13);
            ctx.bcurve_to(85.12, -126.62, 74.26, -133.80, 62.56, -140.56);
            ctx.bcurve_to(36.94, -134.78, 11.74, -126.62, -13.40, -117.53);
            ctx.bcurve_to(-5.49, -110.98, 2.33, -104.22, 10.03, -97.22);
            ctx.bcurve_to(37.95, -105.53, 66.19, -113.36, 95.19, -119.13);
            ctx.move_to(-71.44, -104.72);
            ctx.bcurve_to(-80.56, -110.77, -89.76, -116.46, -99.06, -121.75);
            ctx.bcurve_to(-115.97, -74.44, -126.56, -25.84, -135.19, 23.38);
            ctx.bcurve_to(-129.04, 35.76, -121.89, 47.43, -113.87, 58.44);
            ctx.bcurve_to(-102.36, 4.19, -89.13, -50.22, -71.44, -104.72);
            ctx.move_to(139.44, -78.47);
            ctx.bcurve_to(131.88, -87.13, 123.53, -95.53, 114.38, -103.59);
            ctx.line_to(114.38, -103.59);
            ctx.bcurve_to(84.47, -98.53, 55.16, -90.83, 25.88, -82.31);
            ctx.bcurve_to(33.85, -74.56, 41.70, -66.58, 49.34, -58.31);
            ctx.bcurve_to(79.28, -67.12, 109.31, -74.12, 139.44, -78.47);
            ctx.move_to(-22.37, -67.75);
            ctx.bcurve_to(-33.21, -76.95, -44.20, -85.58, -55.34, -93.62);
            ctx.bcurve_to(-73.50, -36.79, -86.93, 20.16, -98.75, 77.28);
            ctx.bcurve_to(-90.13, 87.00, -80.74, 96.09, -70.65, 104.56);
            ctx.bcurve_to(-59.15, 46.57, -44.45, -11.13, -22.37, -67.75);
            ctx.move_to(169.94, -34.69);
            ctx.bcurve_to(165.02, -43.79, 159.40, -52.71, 153.06, -61.41);
            ctx.bcurve_to(123.19, -57.76, 93.22, -51.30, 63.16, -42.84);
            ctx.bcurve_to(67.65, -37.64, 72.07, -32.34, 76.41, -26.94);
            ctx.bcurve_to(101.98, -31.44, 127.56, -33.67, 153.09, -33.88);
            ctx.bcurve_to(158.89, -33.92, 164.68, -33.84, 170.47, -33.69);
            ctx.bcurve_to(170.29, -34.02, 170.12, -34.35, 169.94, -34.69);
            ctx.move_to(21.07, -26.87);
            ctx.bcurve_to(11.71, -36.57, 2.23, -45.82, -7.41, -54.59);
            ctx.bcurve_to(-28.73, 1.60, -42.90, 59.16, -54.13, 117.44);
            ctx.bcurve_to(-43.57, 125.07, -32.39, 132.13, -20.63, 138.53);
            ctx.bcurve_to(-9.69, 83.54, 3.17, 28.40, 21.07, -26.87);
            ctx.move_to(179.50, -14.69);
            ctx.bcurve_to(171.49, -15.06, 163.47, -15.24, 155.47, -15.22);
            ctx.bcurve_to(133.43, -15.15, 111.42, -13.49, 89.41, -10.13);
            ctx.bcurve_to(94.86, -2.81, 100.19, 4.65, 105.34, 12.31);
            ctx.bcurve_to(107.42, 12.27, 109.50, 12.23, 111.56, 12.22);
            ctx.bcurve_to(138.67, 12.05, 164.85, 14.76, 191.00, 20.84);
            ctx.bcurve_to(188.19, 8.79, 184.37, -3.08, 179.50, -14.69);
            ctx.move_to(66.34, 24.97);
            ctx.bcurve_to(56.34, 12.32, 46.12, 0.28, 35.72, -11.22);
            ctx.line_to(35.72, -11.22);
            ctx.bcurve_to(19.22, 41.49, 7.12, 94.33, -3.31, 147.31);
            ctx.bcurve_to(7.52, 152.42, 18.76, 157.03, 30.37, 161.16);
            ctx.bcurve_to(38.68, 115.57, 47.86, 69.58, 66.34, 24.97);
            ctx.move_to(194.75, 41.00);
            ctx.bcurve_to(169.21, 34.32, 143.84, 31.17, 117.31, 30.94);
            ctx.line_to(117.31, 30.94);
            ctx.bcurve_to(123.40, 40.80, 129.23, 50.92, 134.78, 61.34);
            ctx.bcurve_to(155.37, 65.37, 176.27, 70.11, 196.84, 78.34);
            ctx.bcurve_to(197.13, 65.80, 196.46, 53.32, 194.75, 41.00);
            ctx.move_to(101.44, 73.03);
            ctx.bcurve_to(94.28, 62.46, 87.00, 52.21, 79.59, 42.28);
            ctx.bcurve_to(64.33, 82.45, 56.09, 124.45, 48.31, 167.06);
            ctx.bcurve_to(58.69, 170.21, 69.32, 172.96, 80.19, 175.34);
            ctx.bcurve_to(84.74, 140.42, 92.56, 106.48, 101.44, 73.03);
            ctx.move_to(195.59, 98.09);
            ctx.bcurve_to(179.43, 91.04, 162.71, 86.42, 145.56, 82.66);
            ctx.line_to(145.56, 82.66);
            ctx.bcurve_to(150.27, 92.50, 154.68, 102.61, 158.87, 112.94);
            ctx.bcurve_to(169.94, 117.04, 180.61, 122.52, 190.37, 129.31);
            ctx.bcurve_to(192.76, 118.91, 194.51, 108.49, 195.59, 98.09);
            ctx.move_to(136.28, 128.75);
            ctx.bcurve_to(129.43, 116.88, 122.41, 105.34, 115.28, 94.13);
            ctx.bcurve_to(108.22, 122.18, 102.23, 150.35, 98.56, 178.97);
            ctx.bcurve_to(107.69, 180.58, 116.96, 181.94, 126.34, 183.03);
            ctx.bcurve_to(127.83, 164.70, 130.88, 146.55, 136.28, 128.75);
            ctx.move_to(185.13, 148.81);
            ctx.bcurve_to(179.87, 144.69, 174.22, 141.02, 168.31, 137.81);
            ctx.bcurve_to(171.85, 147.90, 175.14, 158.22, 178.16, 168.75);
            ctx.bcurve_to(180.73, 162.13, 183.07, 155.48, 185.13, 148.81);
            ctx.move_to(154.56, 161.91);
            ctx.bcurve_to(152.92, 158.79, 151.26, 155.70, 149.59, 152.63);
            ctx.bcurve_to(147.39, 163.18, 145.89, 173.92, 145.00, 184.84);
            ctx.bcurve_to(151.12, 185.32, 157.26, 185.71, 163.47, 185.97);
            ctx.bcurve_to(160.88, 177.96, 157.91, 169.93, 154.56, 161.90);
            ctx.fill();
            break;
        case PetalID::kRice:
            ctx.set_stroke(0xffcfcfcf);
            ctx.set_line_width(9);
            ctx.scale(r / 13);
            ctx.begin_path();
            ctx.move_to(-8,0);
            ctx.qcurve_to(0,-3.5,8,0);
            ctx.stroke();
            ctx.set_stroke(0xffffffff);
            ctx.set_line_width(5);
            ctx.stroke();
            break;
        case PetalID::kBone:
            ctx.set_fill(0xffffffff);
            ctx.set_stroke(0xffcfcfcf);
            ctx.set_line_width(5);
            ctx.scale(r / 12);
            ctx.begin_path();
            ctx.move_to(-10,-4);
            ctx.qcurve_to(0,0,10,-4);
            ctx.bcurve_to(14,-10,20,-2,14,0);
            ctx.bcurve_to(20,2,14,10,10,4);
            ctx.qcurve_to(0,0,-10,4);
            ctx.bcurve_to(-14,10,-20,2,-14,0);
            ctx.bcurve_to(-20,-2,-14,-10,-10,-4);
            ctx.stroke();
            ctx.fill();
            break;
        case PetalID::kYucca:
            ctx.set_fill(0xff74b53f);
            ctx.set_stroke(0xff5e9333);
            ctx.set_line_width(3);
            ctx.begin_path();
            ctx.move_to(14,0);
            ctx.qcurve_to(0,-12,-14,0);
            ctx.qcurve_to(0,12,14,0);
            ctx.fill();
            ctx.stroke();
            ctx.set_line_width(2);
            ctx.begin_path();
            ctx.move_to(14,0);
            ctx.qcurve_to(0,-3,-14,0);
            ctx.stroke();
            break;
        case PetalID::kCorn:
            ctx.scale(r / 10);
            ctx.set_fill(0xffffe419);
            ctx.set_stroke(0xffcfb914);
            ctx.set_line_width(2);
            ctx.begin_path();
            ctx.move_to(-5,8);
            ctx.qcurve_to(-15,-8,0,-8);
            ctx.qcurve_to(15,-8,5,8);
            ctx.qcurve_to(0,2,-5,8);
            ctx.fill();
            ctx.stroke();
            break;
        #ifdef DEV
        case PetalID::kM28:
            ctx.begin_path();
            ctx.move_to(-230.34, -169.53);
            ctx.bcurve_to(-242.75, -194.66, -239.90, -216.60, -202.31, -232.03);
            ctx.line_to(-202.31, -232.03);
            ctx.bcurve_to(-175.35, -220.29, -147.49, -206.55, -119.56, -190.60);
            ctx.bcurve_to(-103.63, -197.35, -87.58, -203.79, -71.38, -209.13);
            ctx.line_to(-71.16, -210.06);
            ctx.bcurve_to(-70.64, -209.95, -70.14, -209.84, -69.63, -209.72);
            ctx.bcurve_to(-51.16, -215.71, -32.51, -220.24, -13.63, -222.19);
            ctx.line_to(-11.69, -203.60);
            ctx.bcurve_to(-18.65, -202.88, -25.65, -201.75, -32.69, -200.28);
            ctx.bcurve_to(-18.86, -196.28, -5.65, -191.88, 6.97, -187.13);
            ctx.bcurve_to(28.05, -191.87, 49.12, -195.40, 70.16, -197.91);
            ctx.line_to(72.38, -179.35);
            ctx.bcurve_to(60.85, -177.97, 49.33, -176.28, 37.81, -174.25);
            ctx.bcurve_to(47.45, -169.82, 56.68, -165.19, 65.50, -160.31);
            ctx.bcurve_to(85.48, -164.46, 105.90, -167.22, 126.91, -167.94);
            ctx.line_to(127.53, -149.28);
            ctx.bcurve_to(114.77, -148.85, 102.19, -147.59, 89.72, -145.69);
            ctx.bcurve_to(100.48, -138.62, 110.54, -131.19, 119.88, -123.44);
            ctx.bcurve_to(139.03, -126.34, 158.55, -128.18, 178.56, -128.47);
            ctx.line_to(178.85, -109.78);
            ctx.bcurve_to(165.10, -109.58, 151.54, -108.61, 138.13, -107.03);
            ctx.bcurve_to(146.65, -98.70, 154.45, -90.07, 161.53, -81.16);
            ctx.bcurve_to(176.57, -82.67, 191.64, -83.48, 206.72, -83.50);
            ctx.line_to(206.72, -64.81);
            ctx.bcurve_to(195.94, -64.80, 185.15, -64.36, 174.35, -63.53);
            ctx.bcurve_to(178.70, -57.00, 182.72, -50.36, 186.38, -43.59);
            ctx.bcurve_to(188.32, -39.99, 190.16, -36.35, 191.91, -32.68);
            ctx.bcurve_to(200.12, -32.12, 208.33, -31.35, 216.53, -30.40);
            ctx.line_to(214.41, -11.84);
            ctx.bcurve_to(209.66, -12.39, 204.90, -12.86, 200.16, -13.28);
            ctx.bcurve_to(204.99, -0.35, 208.65, 12.87, 211.19, 26.25);
            ctx.bcurve_to(220.15, 28.94, 229.14, 32.00, 238.19, 35.53);
            ctx.line_to(231.38, 52.94);
            ctx.bcurve_to(225.61, 50.69, 219.89, 48.60, 214.19, 46.72);
            ctx.bcurve_to(215.56, 59.97, 215.87, 73.34, 215.16, 86.75);
            ctx.bcurve_to(222.29, 90.45, 229.37, 94.66, 236.35, 99.53);
            ctx.line_to(225.66, 114.84);
            ctx.bcurve_to(221.59, 112.00, 217.47, 109.40, 213.31, 107.00);
            ctx.bcurve_to(211.78, 118.85, 209.49, 130.70, 206.41, 142.47);
            ctx.bcurve_to(215.97, 151.68, 224.08, 162.38, 230.03, 174.41);
            ctx.line_to(213.28, 182.69);
            ctx.bcurve_to(209.82, 175.69, 205.38, 169.15, 200.19, 163.16);
            ctx.bcurve_to(196.27, 174.68, 191.60, 186.11, 186.25, 197.37);
            ctx.bcurve_to(188.93, 207.61, 191.06, 217.85, 192.63, 228.09);
            ctx.line_to(174.16, 230.91);
            ctx.bcurve_to(172.83, 222.25, 171.08, 213.58, 168.91, 204.91);
            ctx.bcurve_to(160.54, 204.65, 152.23, 204.20, 144.00, 203.56);
            ctx.bcurve_to(143.81, 210.75, 143.82, 218.00, 144.00, 225.31);
            ctx.line_to(125.31, 225.75);
            ctx.bcurve_to(125.12, 217.76, 125.12, 209.77, 125.34, 201.81);
            ctx.bcurve_to(115.61, 200.71, 106.02, 199.31, 96.53, 197.66);
            ctx.bcurve_to(95.94, 204.19, 95.46, 210.76, 95.16, 217.34);
            ctx.line_to(76.50, 216.47);
            ctx.bcurve_to(76.85, 208.96, 77.40, 201.51, 78.09, 194.10);
            ctx.bcurve_to(66.82, 191.67, 55.75, 188.82, 44.94, 185.60);
            ctx.bcurve_to(43.99, 190.82, 43.04, 196.05, 42.06, 201.28);
            ctx.line_to(23.69, 197.84);
            ctx.bcurve_to(24.80, 191.86, 25.88, 185.85, 26.97, 179.84);
            ctx.bcurve_to(15.32, 175.79, 3.99, 171.23, -6.97, 166.22);
            ctx.bcurve_to(-8.51, 174.30, -10.01, 182.39, -11.50, 190.47);
            ctx.line_to(-29.88, 187.10);
            ctx.bcurve_to(-28.07, 177.30, -26.25, 167.49, -24.38, 157.69);
            ctx.bcurve_to(-36.05, 151.58, -47.24, 144.90, -57.91, 137.63);
            ctx.bcurve_to(-59.44, 146.09, -60.93, 154.57, -62.38, 163.06);
            ctx.line_to(-80.81, 159.94);
            ctx.bcurve_to(-78.85, 148.41, -76.80, 136.89, -74.66, 125.38);
            ctx.bcurve_to(-84.83, 117.40, -94.38, 108.82, -103.31, 99.66);
            ctx.bcurve_to(-105.78, 111.96, -108.18, 124.28, -110.56, 136.59);
            ctx.line_to(-128.91, 133.03);
            ctx.bcurve_to(-125.64, 116.14, -122.30, 99.24, -118.84, 82.31);
            ctx.bcurve_to(-126.58, 72.92, -133.71, 63.02, -140.13, 52.59);
            ctx.bcurve_to(-141.79, 62.81, -143.39, 73.06, -145.00, 83.31);
            ctx.line_to(-163.47, 80.41);
            ctx.bcurve_to(-160.61, 62.22, -157.70, 43.99, -154.56, 25.78);
            ctx.bcurve_to(-162.84, 8.07, -169.33, -10.85, -173.78, -30.97);
            ctx.bcurve_to(-176.87, -18.73, -179.80, -6.39, -182.69, 6.00);
            ctx.line_to(-200.88, 1.75);
            ctx.bcurve_to(-194.65, -24.93, -188.20, -51.67, -180.28, -78.00);
            ctx.bcurve_to(-180.34, -78.89, -180.39, -79.77, -180.44, -80.66);
            ctx.line_to(-179.47, -80.72);
            ctx.bcurve_to(-172.47, -103.66, -164.33, -126.26, -154.19, -148.19);
            ctx.bcurve_to(-179.16, -158.00, -204.57, -165.14, -230.34, -169.53);
            ctx.move_to(-25.91, -178.72);
            ctx.bcurve_to(-39.40, -182.96, -53.58, -186.83, -68.44, -190.28);
            ctx.line_to(-68.44, -190.28);
            ctx.bcurve_to(-78.68, -186.81, -89.00, -182.86, -99.38, -178.66);
            ctx.bcurve_to(-90.90, -173.48, -82.42, -168.10, -74.00, -162.50);
            ctx.bcurve_to(-57.97, -168.72, -41.93, -174.11, -25.91, -178.72);
            ctx.move_to(5.64, -167.66);
            ctx.bcurve_to(5.64, -167.66, 5.63, -167.65, 5.63, -167.66);
            ctx.line_to(5.63, -167.66);
            ctx.bcurve_to(-14.67, -162.88, -34.94, -156.89, -55.22, -149.56);
            ctx.bcurve_to(-46.91, -143.66, -38.64, -137.56, -30.47, -131.22);
            ctx.bcurve_to(-8.04, -139.55, 14.63, -147.37, 37.84, -153.66);
            ctx.bcurve_to(27.65, -158.60, 16.92, -163.27, 5.66, -167.66);
            ctx.bcurve_to(5.65, -167.66, 5.65, -167.66, 5.64, -167.66);
            ctx.move_to(-136.94, -140.94);
            ctx.bcurve_to(-146.66, -119.98, -154.57, -98.17, -161.41, -75.81);
            ctx.bcurve_to(-159.70, -51.76, -155.24, -29.33, -148.31, -8.53);
            ctx.bcurve_to(-140.32, -49.57, -130.31, -90.46, -115.69, -130.75);
            ctx.bcurve_to(-122.72, -134.37, -129.82, -137.76, -136.94, -140.94);
            ctx.move_to(95.19, -119.13);
            ctx.bcurve_to(85.12, -126.62, 74.26, -133.80, 62.56, -140.56);
            ctx.bcurve_to(36.94, -134.78, 11.74, -126.62, -13.40, -117.53);
            ctx.bcurve_to(-5.49, -110.98, 2.33, -104.22, 10.03, -97.22);
            ctx.bcurve_to(37.95, -105.53, 66.19, -113.36, 95.19, -119.13);
            ctx.move_to(-71.44, -104.72);
            ctx.bcurve_to(-80.56, -110.77, -89.76, -116.46, -99.06, -121.75);
            ctx.bcurve_to(-115.97, -74.44, -126.56, -25.84, -135.19, 23.38);
            ctx.bcurve_to(-129.04, 35.76, -121.89, 47.43, -113.87, 58.44);
            ctx.bcurve_to(-102.36, 4.19, -89.13, -50.22, -71.44, -104.72);
            ctx.move_to(139.44, -78.47);
            ctx.bcurve_to(131.88, -87.13, 123.53, -95.53, 114.38, -103.59);
            ctx.line_to(114.38, -103.59);
            ctx.bcurve_to(84.47, -98.53, 55.16, -90.83, 25.88, -82.31);
            ctx.bcurve_to(33.85, -74.56, 41.70, -66.58, 49.34, -58.31);
            ctx.bcurve_to(79.28, -67.12, 109.31, -74.12, 139.44, -78.47);
            ctx.move_to(-22.37, -67.75);
            ctx.bcurve_to(-33.21, -76.95, -44.20, -85.58, -55.34, -93.62);
            ctx.bcurve_to(-73.50, -36.79, -86.93, 20.16, -98.75, 77.28);
            ctx.bcurve_to(-90.13, 87.00, -80.74, 96.09, -70.65, 104.56);
            ctx.bcurve_to(-59.15, 46.57, -44.45, -11.13, -22.37, -67.75);
            ctx.move_to(169.94, -34.69);
            ctx.bcurve_to(165.02, -43.79, 159.40, -52.71, 153.06, -61.41);
            ctx.bcurve_to(123.19, -57.76, 93.22, -51.30, 63.16, -42.84);
            ctx.bcurve_to(67.65, -37.64, 72.07, -32.34, 76.41, -26.94);
            ctx.bcurve_to(101.98, -31.44, 127.56, -33.67, 153.09, -33.88);
            ctx.bcurve_to(158.89, -33.92, 164.68, -33.84, 170.47, -33.69);
            ctx.bcurve_to(170.29, -34.02, 170.12, -34.35, 169.94, -34.69);
            ctx.move_to(21.07, -26.87);
            ctx.bcurve_to(11.71, -36.57, 2.23, -45.82, -7.41, -54.59);
            ctx.bcurve_to(-28.73, 1.60, -42.90, 59.16, -54.13, 117.44);
            ctx.bcurve_to(-43.57, 125.07, -32.39, 132.13, -20.63, 138.53);
            ctx.bcurve_to(-9.69, 83.54, 3.17, 28.40, 21.07, -26.87);
            ctx.move_to(179.50, -14.69);
            ctx.bcurve_to(171.49, -15.06, 163.47, -15.24, 155.47, -15.22);
            ctx.bcurve_to(133.43, -15.15, 111.42, -13.49, 89.41, -10.13);
            ctx.bcurve_to(94.86, -2.81, 100.19, 4.65, 105.34, 12.31);
            ctx.bcurve_to(107.42, 12.27, 109.50, 12.23, 111.56, 12.22);
            ctx.bcurve_to(138.67, 12.05, 164.85, 14.76, 191.00, 20.84);
            ctx.bcurve_to(188.19, 8.79, 184.37, -3.08, 179.50, -14.69);
            ctx.move_to(66.34, 24.97);
            ctx.bcurve_to(56.34, 12.32, 46.12, 0.28, 35.72, -11.22);
            ctx.line_to(35.72, -11.22);
            ctx.bcurve_to(19.22, 41.49, 7.12, 94.33, -3.31, 147.31);
            ctx.bcurve_to(7.52, 152.42, 18.76, 157.03, 30.37, 161.16);
            ctx.bcurve_to(38.68, 115.57, 47.86, 69.58, 66.34, 24.97);
            ctx.move_to(194.75, 41.00);
            ctx.bcurve_to(169.21, 34.32, 143.84, 31.17, 117.31, 30.94);
            ctx.line_to(117.31, 30.94);
            ctx.bcurve_to(123.40, 40.80, 129.23, 50.92, 134.78, 61.34);
            ctx.bcurve_to(155.37, 65.37, 176.27, 70.11, 196.84, 78.34);
            ctx.bcurve_to(197.13, 65.80, 196.46, 53.32, 194.75, 41.00);
            ctx.move_to(101.44, 73.03);
            ctx.bcurve_to(94.28, 62.46, 87.00, 52.21, 79.59, 42.28);
            ctx.bcurve_to(64.33, 82.45, 56.09, 124.45, 48.31, 167.06);
            ctx.bcurve_to(58.69, 170.21, 69.32, 172.96, 80.19, 175.34);
            ctx.bcurve_to(84.74, 140.42, 92.56, 106.48, 101.44, 73.03);
            ctx.move_to(195.59, 98.09);
            ctx.bcurve_to(179.43, 91.04, 162.71, 86.42, 145.56, 82.66);
            ctx.line_to(145.56, 82.66);
            ctx.bcurve_to(150.27, 92.50, 154.68, 102.61, 158.87, 112.94);
            ctx.bcurve_to(169.94, 117.04, 180.61, 122.52, 190.37, 129.31);
            ctx.bcurve_to(192.76, 118.91, 194.51, 108.49, 195.59, 98.09);
            ctx.move_to(136.28, 128.75);
            ctx.bcurve_to(129.43, 116.88, 122.41, 105.34, 115.28, 94.13);
            ctx.bcurve_to(108.22, 122.18, 102.23, 150.35, 98.56, 178.97);
            ctx.bcurve_to(107.69, 180.58, 116.96, 181.94, 126.34, 183.03);
            ctx.bcurve_to(127.83, 164.70, 130.88, 146.55, 136.28, 128.75);
            ctx.move_to(185.13, 148.81);
            ctx.bcurve_to(179.87, 144.69, 174.22, 141.02, 168.31, 137.81);
            ctx.bcurve_to(171.85, 147.90, 175.14, 158.22, 178.16, 168.75);
            ctx.bcurve_to(180.73, 162.13, 183.07, 155.48, 185.13, 148.81);
            ctx.move_to(154.56, 161.91);
            ctx.bcurve_to(152.92, 158.79, 151.26, 155.70, 149.59, 152.63);
            ctx.bcurve_to(147.39, 163.18, 145.89, 173.92, 145.00, 184.84);
            ctx.bcurve_to(151.12, 185.32, 157.26, 185.71, 163.47, 185.97);
            ctx.bcurve_to(160.88, 177.96, 157.91, 169.93, 154.56, 161.90);
            break;
        case PetalID::kCrown: {
            ctx.set_stroke(0x00000000);
            ctx.scale(0.7272727272727273,0.7272727272727273);
            //ctx.set_fill(0xffgba(0, 0, 0, 0.2));
            ctx.set_transform(0.714286,0,0,0.714286,55,47.8571);
            ctx.begin_path();
            ctx.move_to(30,0);
            ctx.qcurve_to(30,0.736459,29.9639,1.47203);
            ctx.qcurve_to(29.9277,2.2076,29.8555,2.94051);
            ctx.qcurve_to(29.7834,3.67343,29.6753,4.40191);
            ctx.qcurve_to(29.5672,5.1304,29.4236,5.85271);
            ctx.qcurve_to(29.2799,6.57502,29.1009,7.2894);
            ctx.qcurve_to(28.922,8.00379,28.7082,8.70854);
            ctx.qcurve_to(28.4944,9.41329,28.2463,10.1067);
            ctx.qcurve_to(27.9982,10.8001,27.7164,11.4805);
            ctx.qcurve_to(27.4346,12.1609,27.1197,12.8267);
            ctx.qcurve_to(26.8048,13.4924,26.4576,14.1419);
            ctx.qcurve_to(26.1105,14.7914,25.7319,15.4231);
            ctx.qcurve_to(25.3532,16.0548,24.9441,16.6671);
            ctx.qcurve_to(24.5349,17.2794,24.0962,17.871);
            ctx.qcurve_to(23.6575,18.4625,23.1903,19.0318);
            ctx.qcurve_to(22.7231,19.6011,22.2285,20.1468);
            ctx.qcurve_to(21.734,20.6924,21.2132,21.2132);
            ctx.qcurve_to(20.6924,21.734,20.1468,22.2285);
            ctx.qcurve_to(19.6011,22.7231,19.0318,23.1903);
            ctx.qcurve_to(18.4625,23.6575,17.871,24.0962);
            ctx.qcurve_to(17.2794,24.5349,16.6671,24.9441);
            ctx.qcurve_to(16.0548,25.3532,15.4231,25.7319);
            ctx.qcurve_to(14.7914,26.1105,14.1419,26.4576);
            ctx.qcurve_to(13.4924,26.8048,12.8267,27.1197);
            ctx.qcurve_to(12.1609,27.4346,11.4805,27.7164);
            ctx.qcurve_to(10.8001,27.9982,10.1067,28.2463);
            ctx.qcurve_to(9.41329,28.4944,8.70854,28.7082);
            ctx.qcurve_to(8.00379,28.922,7.2894,29.1009);
            ctx.qcurve_to(6.57502,29.2799,5.85271,29.4236);
            ctx.qcurve_to(5.1304,29.5672,4.40191,29.6753);
            ctx.qcurve_to(3.67343,29.7834,2.94051,29.8555);
            ctx.qcurve_to(2.2076,29.9277,1.47203,29.9639);
            ctx.qcurve_to(0.736459,30,0,30);
            ctx.qcurve_to(-0.736459,30,-1.47203,29.9639);
            ctx.qcurve_to(-2.2076,29.9277,-2.94051,29.8555);
            ctx.qcurve_to(-3.67343,29.7834,-4.40191,29.6753);
            ctx.qcurve_to(-5.1304,29.5672,-5.85271,29.4236);
            ctx.qcurve_to(-6.57502,29.2799,-7.2894,29.1009);
            ctx.qcurve_to(-8.00379,28.922,-8.70854,28.7082);
            ctx.qcurve_to(-9.41329,28.4944,-10.1067,28.2463);
            ctx.qcurve_to(-10.8001,27.9982,-11.4805,27.7164);
            ctx.qcurve_to(-12.1609,27.4346,-12.8267,27.1197);
            ctx.qcurve_to(-13.4924,26.8048,-14.1419,26.4576);
            ctx.qcurve_to(-14.7914,26.1105,-15.4231,25.7319);
            ctx.qcurve_to(-16.0548,25.3532,-16.6671,24.9441);
            ctx.qcurve_to(-17.2794,24.5349,-17.871,24.0962);
            ctx.qcurve_to(-18.4625,23.6575,-19.0318,23.1903);
            ctx.qcurve_to(-19.6011,22.7231,-20.1468,22.2285);
            ctx.qcurve_to(-20.6924,21.734,-21.2132,21.2132);
            ctx.qcurve_to(-21.734,20.6924,-22.2285,20.1468);
            ctx.qcurve_to(-22.7231,19.6011,-23.1903,19.0318);
            ctx.qcurve_to(-23.6575,18.4625,-24.0962,17.871);
            ctx.qcurve_to(-24.5349,17.2794,-24.9441,16.6671);
            ctx.qcurve_to(-25.3532,16.0548,-25.7319,15.4231);
            ctx.qcurve_to(-26.1105,14.7914,-26.4576,14.1419);
            ctx.qcurve_to(-26.8048,13.4924,-27.1197,12.8267);
            ctx.qcurve_to(-27.4346,12.1609,-27.7164,11.4805);
            ctx.qcurve_to(-27.9982,10.8001,-28.2463,10.1067);
            ctx.qcurve_to(-28.4944,9.41329,-28.7082,8.70854);
            ctx.qcurve_to(-28.922,8.00379,-29.1009,7.2894);
            ctx.qcurve_to(-29.2799,6.57502,-29.4236,5.85271);
            ctx.qcurve_to(-29.5672,5.1304,-29.6753,4.40191);
            ctx.qcurve_to(-29.7834,3.67343,-29.8555,2.94051);
            ctx.qcurve_to(-29.9277,2.2076,-29.9639,1.47203);
            ctx.qcurve_to(-30,0.736459,-30,0);
            ctx.qcurve_to(-30,-0.736459,-29.9639,-1.47203);
            ctx.qcurve_to(-29.9277,-2.2076,-29.8555,-2.94051);
            ctx.qcurve_to(-29.7834,-3.67343,-29.6753,-4.40191);
            ctx.qcurve_to(-29.5672,-5.1304,-29.4236,-5.85271);
            ctx.qcurve_to(-29.2799,-6.57502,-29.1009,-7.2894);
            ctx.qcurve_to(-28.922,-8.00379,-28.7082,-8.70854);
            ctx.qcurve_to(-28.4944,-9.41329,-28.2463,-10.1067);
            ctx.qcurve_to(-27.9982,-10.8001,-27.7164,-11.4805);
            ctx.qcurve_to(-27.4346,-12.1609,-27.1197,-12.8267);
            ctx.qcurve_to(-26.8048,-13.4924,-26.4576,-14.1419);
            ctx.qcurve_to(-26.1105,-14.7914,-25.7319,-15.4231);
            ctx.qcurve_to(-25.3532,-16.0548,-24.9441,-16.6671);
            ctx.qcurve_to(-24.5349,-17.2794,-24.0962,-17.871);
            ctx.qcurve_to(-23.6575,-18.4625,-23.1903,-19.0318);
            ctx.qcurve_to(-22.7231,-19.6011,-22.2285,-20.1468);
            ctx.qcurve_to(-21.734,-20.6924,-21.2132,-21.2132);
            ctx.qcurve_to(-20.6924,-21.734,-20.1468,-22.2285);
            ctx.qcurve_to(-19.6011,-22.7231,-19.0318,-23.1903);
            ctx.qcurve_to(-18.4625,-23.6575,-17.871,-24.0962);
            ctx.qcurve_to(-17.2794,-24.5349,-16.6671,-24.9441);
            ctx.qcurve_to(-16.0548,-25.3532,-15.4231,-25.7319);
            ctx.qcurve_to(-14.7914,-26.1105,-14.1419,-26.4576);
            ctx.qcurve_to(-13.4924,-26.8048,-12.8267,-27.1197);
            ctx.qcurve_to(-12.1609,-27.4346,-11.4805,-27.7164);
            ctx.qcurve_to(-10.8001,-27.9982,-10.1067,-28.2463);
            ctx.qcurve_to(-9.41329,-28.4944,-8.70854,-28.7082);
            ctx.qcurve_to(-8.00379,-28.922,-7.2894,-29.1009);
            ctx.qcurve_to(-6.57502,-29.2799,-5.85271,-29.4236);
            ctx.qcurve_to(-5.1304,-29.5672,-4.40191,-29.6753);
            ctx.qcurve_to(-3.67343,-29.7834,-2.94051,-29.8555);
            ctx.qcurve_to(-2.2076,-29.9277,-1.47203,-29.9639);
            ctx.qcurve_to(-0.736459,-30,0,-30);
            ctx.qcurve_to(0.736459,-30,1.47203,-29.9639);
            ctx.qcurve_to(2.2076,-29.9277,2.94051,-29.8555);
            ctx.qcurve_to(3.67343,-29.7834,4.40191,-29.6753);
            ctx.qcurve_to(5.1304,-29.5672,5.85271,-29.4236);
            ctx.qcurve_to(6.57502,-29.2799,7.2894,-29.1009);
            ctx.qcurve_to(8.00379,-28.922,8.70854,-28.7082);
            ctx.qcurve_to(9.41329,-28.4944,10.1067,-28.2463);
            ctx.qcurve_to(10.8001,-27.9982,11.4805,-27.7164);
            ctx.qcurve_to(12.1609,-27.4346,12.8267,-27.1197);
            ctx.qcurve_to(13.4924,-26.8048,14.1419,-26.4576);
            ctx.qcurve_to(14.7914,-26.1105,15.4231,-25.7319);
            ctx.qcurve_to(16.0548,-25.3532,16.6671,-24.9441);
            ctx.qcurve_to(17.2794,-24.5349,17.871,-24.0962);
            ctx.qcurve_to(18.4625,-23.6575,19.0318,-23.1903);
            ctx.qcurve_to(19.6011,-22.7231,20.1468,-22.2285);
            ctx.qcurve_to(20.6924,-21.734,21.2132,-21.2132);
            ctx.qcurve_to(21.734,-20.6924,22.2285,-20.1468);
            ctx.qcurve_to(22.7231,-19.6011,23.1903,-19.0318);
            ctx.qcurve_to(23.6575,-18.4625,24.0962,-17.871);
            ctx.qcurve_to(24.5349,-17.2794,24.9441,-16.6671);
            ctx.qcurve_to(25.3532,-16.0548,25.7319,-15.4231);
            ctx.qcurve_to(26.1105,-14.7914,26.4576,-14.1419);
            ctx.qcurve_to(26.8048,-13.4924,27.1197,-12.8267);
            ctx.qcurve_to(27.4346,-12.1609,27.7164,-11.4805);
            ctx.qcurve_to(27.9982,-10.8001,28.2463,-10.1067);
            ctx.qcurve_to(28.4944,-9.41329,28.7082,-8.70854);
            ctx.qcurve_to(28.922,-8.00379,29.1009,-7.2894);
            ctx.qcurve_to(29.2799,-6.57502,29.4236,-5.85271);
            ctx.qcurve_to(29.5672,-5.1304,29.6753,-4.40191);
            ctx.qcurve_to(29.7834,-3.67343,29.8555,-2.94051);
            ctx.qcurve_to(29.9277,-2.2076,29.9639,-1.47203);
            ctx.qcurve_to(30,-0.736459,30,0);
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xff2f39b1);
            ctx.set_transform(0.714286,0,0,0.714286,15.7143,8.57143);
            ctx.begin_path();
            ctx.move_to(76.512,36.576);
            ctx.line_to(76.512,76.834);
            ctx.line_to(83.172,76.113);
            ctx.bcurve_to(85.675,75.653,86.73,73.725,86.788,71.595);
            ctx.line_to(87.23,55.343);
            ctx.bcurve_to(87.281,53.453,87.7,51.558,88.937,50.555);
            ctx.bcurve_to(90.175,49.553,91.692,49.11,91.449,47.513);
            ctx.bcurve_to(90.599,41.937,88.719,27.632,84.819,23.209);
            ctx.bcurve_to(80.918,18.787,63.7,10.685,55,10.685);
            ctx.bcurve_to(46.3,10.685,29.082,18.787,25.182,23.209);
            ctx.bcurve_to(21.282,27.632,19.401,41.937,18.552,47.513);
            ctx.bcurve_to(18.308,49.11,19.825,49.553,21.062,50.555);
            ctx.bcurve_to(22.301,51.558,22.719,53.453,22.77,55.343);
            ctx.line_to(23.212,71.595);
            ctx.bcurve_to(23.27,73.725,24.325,75.654,26.829,76.113);
            ctx.line_to(33.489,76.833);
            ctx.line_to(33.489,36.577);
            ctx.bcurve_to(38.79,33.57,48.281,30.56,55,30.56);
            ctx.bcurve_to(61.719,30.56,71.209,33.57,76.512,36.576);
            ctx.close_path();
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xffffdc06);
            ctx.set_transform(0.714286,0,0,0.714286,15.7143,8.57143);
            ctx.begin_path();
            ctx.move_to(59.072,11.135);
            ctx.bcurve_to(61.112,11.522,63.344,12.145,65.632,12.924);
            ctx.line_to(62.416,31.463);
            ctx.bcurve_to(60.299,31.007,58.213,30.695,56.301,30.596);
            ctx.line_to(59.072,11.135);
            ctx.close_path();
            ctx.move_to(72.596,15.693);
            ctx.qcurve_to(75.7143,17.0964,78.689,18.783);
            ctx.line_to(72.019,34.436);
            ctx.qcurve_to(69.2363,33.3028,66.352,32.461);
            ctx.line_to(72.596,15.693);
            ctx.close_path();
            ctx.move_to(76.512,34.625);
            ctx.line_to(89.207,34.625);
            ctx.bcurve_to(89.663,36.661,90.039,38.695,90.367,40.625);
            ctx.line_to(76.512,40.625);
            ctx.line_to(76.512,34.625);
            ctx.close_path();
            ctx.move_to(91.275,46.375);
            ctx.line_to(91.449,47.512);
            ctx.bcurve_to(91.693,49.109,90.175,49.552,88.937,50.555);
            ctx.bcurve_to(88.38,51.005,87.997,51.645,87.73,52.375);
            ctx.line_to(76.512,52.375);
            ctx.line_to(76.512,46.375);
            ctx.line_to(91.275,46.375);
            ctx.close_path();
            ctx.move_to(87.155,58.125);
            ctx.line_to(86.99,64.125);
            ctx.line_to(76.512,64.125);
            ctx.line_to(76.512,58.125);
            ctx.line_to(87.155,58.125);
            ctx.close_path();
            ctx.move_to(86.834,69.875);
            ctx.line_to(86.787,71.595);
            ctx.bcurve_to(86.729,73.725,85.675,75.655,83.172,76.113);
            ctx.line_to(76.512,76.834);
            ctx.line_to(76.512,69.875);
            ctx.line_to(86.834,69.875);
            ctx.close_path();
            ctx.move_to(50.928,11.135);
            ctx.bcurve_to(48.888,11.522,46.656,12.145,44.368,12.924);
            ctx.line_to(47.584,31.463);
            ctx.bcurve_to(49.701,31.007,51.787,30.695,53.699,30.596);
            ctx.line_to(50.928,11.135);
            ctx.close_path();
            ctx.move_to(37.404,15.693);
            ctx.qcurve_to(34.2857,17.0964,31.311,18.783);
            ctx.line_to(37.981,34.436);
            ctx.qcurve_to(40.7637,33.3028,43.648,32.461);
            ctx.line_to(37.404,15.693);
            ctx.close_path();
            ctx.move_to(33.488,34.625);
            ctx.line_to(20.793,34.625);
            ctx.bcurve_to(20.337,36.661,19.961,38.695,19.633,40.625);
            ctx.line_to(33.488,40.625);
            ctx.line_to(33.488,34.625);
            ctx.close_path();
            ctx.move_to(18.725,46.375);
            ctx.line_to(18.551,47.512);
            ctx.bcurve_to(18.307,49.109,19.825,49.552,21.063,50.555);
            ctx.bcurve_to(21.62,51.005,22.003,51.645,22.27,52.375);
            ctx.line_to(33.488,52.375);
            ctx.line_to(33.488,46.375);
            ctx.line_to(18.725,46.375);
            ctx.close_path();
            ctx.move_to(22.845,58.125);
            ctx.line_to(23.01,64.125);
            ctx.line_to(33.488,64.125);
            ctx.line_to(33.488,58.125);
            ctx.line_to(22.845,58.125);
            ctx.close_path();
            ctx.move_to(23.166,69.875);
            ctx.line_to(23.213,71.595);
            ctx.bcurve_to(23.271,73.725,24.325,75.655,26.828,76.113);
            ctx.line_to(33.488,76.834);
            ctx.line_to(33.488,69.875);
            ctx.line_to(23.166,69.875);
            ctx.close_path();
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xff262e8e);
            ctx.set_transform(0.714286,0,0,0.714286,15.7143,8.57143);
            ctx.begin_path();
            ctx.move_to(79.7348,31.5216);
            ctx.line_to(83.9158,22.7776);
            ctx.qcurve_to(83.9583,22.6888,84.0173,22.6099);
            ctx.qcurve_to(84.0763,22.531,84.1496,22.4652);
            ctx.qcurve_to(84.2228,22.3994,84.3075,22.3491);
            ctx.qcurve_to(84.3922,22.2988,84.4851,22.266);
            ctx.qcurve_to(84.578,22.2332,84.6755,22.2192);
            ctx.qcurve_to(84.7729,22.2052,84.8713,22.2104);
            ctx.qcurve_to(84.9696,22.2157,85.0651,22.24);
            ctx.qcurve_to(85.1605,22.2643,85.2494,22.3068);
            ctx.qcurve_to(85.3382,22.3493,85.4171,22.4083);
            ctx.qcurve_to(85.4959,22.4673,85.5618,22.5406);
            ctx.qcurve_to(85.6276,22.6138,85.6779,22.6985);
            ctx.qcurve_to(85.7282,22.7832,85.761,22.8761);
            ctx.qcurve_to(85.7937,22.969,85.8078,23.0665);
            ctx.qcurve_to(85.8218,23.1639,85.8166,23.2623);
            ctx.qcurve_to(85.8113,23.3606,85.787,23.4561);
            ctx.qcurve_to(85.7626,23.5515,85.7202,23.6404);
            ctx.line_to(81.5392,32.3844);
            ctx.qcurve_to(81.4967,32.4732,81.4377,32.5521);
            ctx.qcurve_to(81.3787,32.631,81.3054,32.6968);
            ctx.qcurve_to(81.2321,32.7626,81.1475,32.8129);
            ctx.qcurve_to(81.0628,32.8632,80.9699,32.896);
            ctx.qcurve_to(80.877,32.9287,80.7795,32.9428);
            ctx.qcurve_to(80.682,32.9568,80.5837,32.9516);
            ctx.qcurve_to(80.4853,32.9463,80.3899,32.922);
            ctx.qcurve_to(80.2945,32.8977,80.2056,32.8552);
            ctx.qcurve_to(80.1168,32.8127,80.0379,32.7537);
            ctx.qcurve_to(79.959,32.6947,79.8932,32.6214);
            ctx.qcurve_to(79.8274,32.5482,79.7771,32.4635);
            ctx.qcurve_to(79.7268,32.3788,79.694,32.2859);
            ctx.qcurve_to(79.6612,32.193,79.6472,32.0955);
            ctx.qcurve_to(79.6332,31.998,79.6384,31.8997);
            ctx.qcurve_to(79.6437,31.8013,79.668,31.7059);
            ctx.qcurve_to(79.6923,31.6105,79.7348,31.5216);
            ctx.close_path();
            ctx.move_to(28.4608,32.3844);
            ctx.line_to(24.2798,23.6404);
            ctx.qcurve_to(24.2373,23.5515,24.213,23.4561);
            ctx.qcurve_to(24.1887,23.3606,24.1834,23.2623);
            ctx.qcurve_to(24.1782,23.1639,24.1922,23.0665);
            ctx.qcurve_to(24.2062,22.969,24.239,22.8761);
            ctx.qcurve_to(24.2718,22.7832,24.3221,22.6985);
            ctx.qcurve_to(24.3724,22.6138,24.4382,22.5406);
            ctx.qcurve_to(24.504,22.4673,24.5829,22.4083);
            ctx.qcurve_to(24.6618,22.3493,24.7506,22.3068);
            ctx.qcurve_to(24.8395,22.2643,24.9349,22.24);
            ctx.qcurve_to(25.0303,22.2157,25.1287,22.2104);
            ctx.qcurve_to(25.2271,22.2052,25.3245,22.2192);
            ctx.qcurve_to(25.422,22.2332,25.5149,22.266);
            ctx.qcurve_to(25.6078,22.2988,25.6925,22.3491);
            ctx.qcurve_to(25.7772,22.3994,25.8504,22.4652);
            ctx.qcurve_to(25.9237,22.531,25.9827,22.6099);
            ctx.qcurve_to(26.0417,22.6888,26.0842,22.7776);
            ctx.line_to(30.2652,31.5216);
            ctx.qcurve_to(30.3077,31.6105,30.332,31.7059);
            ctx.qcurve_to(30.3563,31.8013,30.3616,31.8997);
            ctx.qcurve_to(30.3668,31.9981,30.3528,32.0955);
            ctx.qcurve_to(30.3387,32.193,30.306,32.2859);
            ctx.qcurve_to(30.2732,32.3788,30.2229,32.4635);
            ctx.qcurve_to(30.1726,32.5482,30.1068,32.6214);
            ctx.qcurve_to(30.041,32.6947,29.9621,32.7537);
            ctx.qcurve_to(29.8832,32.8127,29.7944,32.8552);
            ctx.qcurve_to(29.7055,32.8977,29.6101,32.922);
            ctx.qcurve_to(29.5146,32.9463,29.4163,32.9516);
            ctx.qcurve_to(29.3179,32.9568,29.2205,32.9428);
            ctx.qcurve_to(29.123,32.9287,29.0301,32.896);
            ctx.qcurve_to(28.9372,32.8632,28.8525,32.8129);
            ctx.qcurve_to(28.7678,32.7626,28.6946,32.6968);
            ctx.qcurve_to(28.6213,32.631,28.5623,32.5521);
            ctx.qcurve_to(28.5033,32.4732,28.4608,32.3844);
            ctx.close_path();
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xff262e8e);
            ctx.set_transform(0.714286,0,0,0.714286,15.7143,8.57143);
            ctx.begin_path();
            ctx.move_to(77.512,50.195);
            ctx.line_to(77.512,76.834);
            ctx.line_to(76.512,76.834);
            ctx.line_to(76.4044,75.8398);
            ctx.line_to(83.0644,75.1188);
            ctx.line_to(83.172,76.113);
            ctx.line_to(82.9912,75.1295);
            ctx.qcurve_to(85.705,74.6307,85.7884,71.5678);
            ctx.line_to(86.2304,55.3158);
            ctx.qcurve_to(86.3367,51.376,88.3072,49.7783);
            ctx.qcurve_to(88.6452,49.5047,89.3057,49.0664);
            ctx.qcurve_to(90.5484,48.2419,90.4604,47.6634);
            ctx.qcurve_to(90.3989,47.26,90.2604,46.3305);
            ctx.qcurve_to(87.4933,27.754,84.0689,23.8704);
            ctx.qcurve_to(81.0909,20.4947,71.3075,16.2046);
            ctx.qcurve_to(61.0008,11.685,55,11.685);
            ctx.qcurve_to(48.9991,11.685,38.6926,16.2046);
            ctx.qcurve_to(28.9092,20.4947,25.932,23.8705);
            ctx.qcurve_to(22.505,27.757,19.7383,46.3443);
            ctx.qcurve_to(19.6014,47.2643,19.5406,47.6635);
            ctx.qcurve_to(19.4522,48.2422,20.6937,49.0664);
            ctx.qcurve_to(21.3542,49.5048,21.6914,49.7779);
            ctx.qcurve_to(23.6633,51.3742,23.7696,55.316);
            ctx.line_to(24.2116,71.5678);
            ctx.qcurve_to(24.2951,74.6319,27.0093,75.1294);
            ctx.line_to(26.829,76.113);
            ctx.line_to(26.9365,75.1188);
            ctx.line_to(33.5965,75.8388);
            ctx.line_to(33.489,76.833);
            ctx.line_to(32.489,76.833);
            ctx.line_to(32.489,50.196);
            ctx.qcurve_to(32.489,50.0975,32.5082,50.0009);
            ctx.qcurve_to(32.5274,49.9043,32.5651,49.8133);
            ctx.qcurve_to(32.6028,49.7223,32.6575,49.6404);
            ctx.qcurve_to(32.7122,49.5585,32.7819,49.4889);
            ctx.qcurve_to(32.8515,49.4192,32.9334,49.3645);
            ctx.qcurve_to(33.0153,49.3098,33.1063,49.2721);
            ctx.qcurve_to(33.1973,49.2344,33.2939,49.2152);
            ctx.qcurve_to(33.3905,49.196,33.489,49.196);
            ctx.qcurve_to(33.5875,49.196,33.6841,49.2152);
            ctx.qcurve_to(33.7807,49.2344,33.8717,49.2721);
            ctx.qcurve_to(33.9627,49.3098,34.0446,49.3645);
            ctx.qcurve_to(34.1265,49.4192,34.1961,49.4889);
            ctx.qcurve_to(34.2657,49.5585,34.3205,49.6404);
            ctx.qcurve_to(34.3752,49.7223,34.4129,49.8133);
            ctx.qcurve_to(34.4506,49.9043,34.4698,50.0009);
            ctx.qcurve_to(34.489,50.0975,34.489,50.196);
            ctx.line_to(34.489,76.833);
            ctx.qcurve_to(34.489,76.8869,34.4832,76.9405);
            ctx.qcurve_to(34.4726,77.0384,34.4431,77.1324);
            ctx.qcurve_to(34.4136,77.2263,34.3664,77.3128);
            ctx.qcurve_to(34.3191,77.3992,34.2559,77.4747);
            ctx.qcurve_to(34.1927,77.5502,34.116,77.612);
            ctx.qcurve_to(34.0393,77.6738,33.952,77.7194);
            ctx.qcurve_to(33.8647,77.765,33.7702,77.7927);
            ctx.qcurve_to(33.6756,77.8204,33.5775,77.8291);
            ctx.qcurve_to(33.4794,77.8378,33.3815,77.8272);
            ctx.line_to(26.7215,77.1072);
            ctx.qcurve_to(26.6849,77.1032,26.6487,77.0966);
            ctx.qcurve_to(22.3399,76.3068,22.2124,71.6222);
            ctx.line_to(21.7704,55.37);
            ctx.qcurve_to(21.6888,52.349,20.4326,51.3321);
            ctx.qcurve_to(20.1691,51.1186,19.5876,50.7326);
            ctx.qcurve_to(17.2823,49.2023,17.5634,47.3625);
            ctx.qcurve_to(17.6235,46.9675,17.7601,46.0498);
            ctx.qcurve_to(20.6139,26.8777,24.432,22.5475);
            ctx.qcurve_to(27.7014,18.8405,37.8894,14.3729);
            ctx.qcurve_to(48.5799,9.685,55,9.685);
            ctx.qcurve_to(61.42,9.68501,72.1107,14.3729);
            ctx.qcurve_to(82.2986,18.8404,85.5691,22.5476);
            ctx.qcurve_to(89.3844,26.8746,92.2386,46.0359);
            ctx.qcurve_to(92.3769,46.9641,92.4376,47.3626);
            ctx.qcurve_to(92.7176,49.2029,90.4114,50.733);
            ctx.qcurve_to(89.8298,51.1189,89.5668,51.3317);
            ctx.qcurve_to(88.3111,52.3499,88.2296,55.3702);
            ctx.line_to(87.7876,71.6222);
            ctx.qcurve_to(87.6601,76.3049,83.3528,77.0965);
            ctx.qcurve_to(83.3164,77.1032,83.2796,77.1072);
            ctx.line_to(76.6196,77.8282);
            ctx.qcurve_to(76.566,77.834,76.512,77.834);
            ctx.qcurve_to(76.4135,77.834,76.3169,77.8148);
            ctx.qcurve_to(76.2203,77.7956,76.1293,77.7579);
            ctx.qcurve_to(76.0383,77.7202,75.9564,77.6655);
            ctx.qcurve_to(75.8745,77.6107,75.8049,77.5411);
            ctx.qcurve_to(75.7352,77.4715,75.6805,77.3896);
            ctx.qcurve_to(75.6258,77.3077,75.5881,77.2167);
            ctx.qcurve_to(75.5504,77.1257,75.5312,77.0291);
            ctx.qcurve_to(75.512,76.9325,75.512,76.834);
            ctx.line_to(75.512,50.195);
            ctx.qcurve_to(75.512,50.0965,75.5312,49.9999);
            ctx.qcurve_to(75.5504,49.9033,75.5881,49.8123);
            ctx.qcurve_to(75.6258,49.7213,75.6805,49.6394);
            ctx.qcurve_to(75.7352,49.5575,75.8049,49.4879);
            ctx.qcurve_to(75.8745,49.4182,75.9564,49.3635);
            ctx.qcurve_to(76.0383,49.3088,76.1293,49.2711);
            ctx.qcurve_to(76.2203,49.2334,76.3169,49.2142);
            ctx.qcurve_to(76.4135,49.195,76.512,49.195);
            ctx.qcurve_to(76.6105,49.195,76.7071,49.2142);
            ctx.qcurve_to(76.8037,49.2334,76.8947,49.2711);
            ctx.qcurve_to(76.9857,49.3088,77.0676,49.3635);
            ctx.qcurve_to(77.1495,49.4182,77.2191,49.4879);
            ctx.qcurve_to(77.2887,49.5575,77.3435,49.6394);
            ctx.qcurve_to(77.3982,49.7213,77.4359,49.8123);
            ctx.qcurve_to(77.4736,49.9033,77.4928,49.9999);
            ctx.qcurve_to(77.512,50.0965,77.512,50.195);
            ctx.close_path();
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xffffdc06);
            ctx.set_transform(0.714286,0,0,0.714286,15.7143,8.57143);
            ctx.begin_path();
            ctx.move_to(80.637,31.953);
            ctx.line_to(80.637,46.05);
            ctx.line_to(76.512,50.195);
            ctx.line_to(76.512,36.575);
            ctx.bcurve_to(71.209,33.57,61.718,30.56,55,30.56);
            ctx.bcurve_to(48.282,30.56,38.791,33.57,33.488,36.576);
            ctx.line_to(33.488,50.196);
            ctx.line_to(29.363,46.05);
            ctx.line_to(29.363,31.953);
            ctx.bcurve_to(33.503,28.957,46.968,23.383,55,23.383);
            ctx.bcurve_to(63.032,23.383,76.497,28.957,80.637,31.953);
            ctx.close_path();
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xffccb005);
            ctx.set_transform(0.714286,0,0,0.714286,15.7143,8.57143);
            ctx.begin_path();
            ctx.move_to(81.637,31.953);
            ctx.line_to(81.637,46.05);
            ctx.qcurve_to(81.637,46.2483,81.5613,46.4316);
            ctx.qcurve_to(81.4857,46.6148,81.3458,46.7554);
            ctx.line_to(77.2208,50.9004);
            ctx.qcurve_to(77.1513,50.9702,77.0696,51.0251);
            ctx.qcurve_to(76.9878,51.08,76.8969,51.1179);
            ctx.qcurve_to(76.806,51.1559,76.7094,51.1753);
            ctx.qcurve_to(76.6129,51.1948,76.5144,51.195);
            ctx.qcurve_to(76.4159,51.1952,76.3193,51.1762);
            ctx.qcurve_to(76.2226,51.1573,76.1315,51.1198);
            ctx.qcurve_to(76.0405,51.0823,75.9584,51.0278);
            ctx.qcurve_to(75.8764,50.9733,75.8066,50.9038);
            ctx.qcurve_to(75.6652,50.7631,75.5886,50.5788);
            ctx.qcurve_to(75.512,50.3945,75.512,50.195);
            ctx.line_to(75.512,36.575);
            ctx.line_to(76.512,36.575);
            ctx.line_to(76.019,37.445);
            ctx.qcurve_to(65.6335,31.56,55,31.56);
            ctx.qcurve_to(44.3647,31.56,33.9811,37.446);
            ctx.line_to(33.488,36.576);
            ctx.line_to(34.488,36.576);
            ctx.line_to(34.488,50.196);
            ctx.qcurve_to(34.488,50.2945,34.4688,50.3911);
            ctx.qcurve_to(34.4496,50.4877,34.4119,50.5787);
            ctx.qcurve_to(34.3742,50.6697,34.3195,50.7516);
            ctx.qcurve_to(34.2647,50.8335,34.1951,50.9031);
            ctx.qcurve_to(34.1255,50.9727,34.0436,51.0275);
            ctx.qcurve_to(33.9617,51.0822,33.8707,51.1199);
            ctx.qcurve_to(33.7797,51.1576,33.6831,51.1768);
            ctx.qcurve_to(33.5865,51.196,33.488,51.196);
            ctx.qcurve_to(33.2884,51.196,33.1041,51.1194);
            ctx.qcurve_to(32.9199,51.0428,32.7791,50.9013);
            ctx.line_to(28.6541,46.7553);
            ctx.qcurve_to(28.5143,46.6148,28.4386,46.4315);
            ctx.qcurve_to(28.363,46.2483,28.363,46.05);
            ctx.line_to(28.363,31.953);
            ctx.qcurve_to(28.363,31.8344,28.3907,31.7191);
            ctx.qcurve_to(28.4185,31.6038,28.4724,31.4982);
            ctx.qcurve_to(28.5264,31.3925,28.6035,31.3025);
            ctx.qcurve_to(28.6807,31.2124,28.7767,31.1429);
            ctx.qcurve_to(32.4815,28.4618,40.3818,25.6041);
            ctx.qcurve_to(49.2869,22.383,55,22.383);
            ctx.qcurve_to(60.7131,22.383,69.6181,25.6041);
            ctx.qcurve_to(77.5185,28.4619,81.2233,31.1429);
            ctx.qcurve_to(81.3193,31.2124,81.3965,31.3025);
            ctx.qcurve_to(81.4736,31.3925,81.5276,31.4982);
            ctx.qcurve_to(81.5815,31.6038,81.6093,31.7191);
            ctx.qcurve_to(81.637,31.8344,81.637,31.953);
            ctx.close_path();
            ctx.move_to(79.637,31.953);
            ctx.line_to(80.637,31.953);
            ctx.line_to(80.0507,32.7631);
            ctx.qcurve_to(76.5738,30.2469,68.9379,27.4849);
            ctx.qcurve_to(60.3625,24.383,55,24.383);
            ctx.qcurve_to(49.6375,24.383,41.0622,27.4849);
            ctx.qcurve_to(33.4263,30.2469,29.9493,32.7631);
            ctx.line_to(29.363,31.953);
            ctx.line_to(30.363,31.953);
            ctx.line_to(30.363,46.05);
            ctx.line_to(29.363,46.05);
            ctx.line_to(30.0719,45.3447);
            ctx.line_to(34.1969,49.4907);
            ctx.line_to(33.488,50.196);
            ctx.line_to(32.488,50.196);
            ctx.line_to(32.488,36.576);
            ctx.qcurve_to(32.488,36.4433,32.5226,36.3153);
            ctx.qcurve_to(32.5572,36.1872,32.624,36.0726);
            ctx.qcurve_to(32.6907,35.958,32.7851,35.8647);
            ctx.qcurve_to(32.8795,35.7715,32.9949,35.706);
            ctx.qcurve_to(43.8373,29.56,55,29.56);
            ctx.qcurve_to(66.1608,29.56,77.005,35.705);
            ctx.qcurve_to(77.1204,35.7704,77.2148,35.8636);
            ctx.qcurve_to(77.3092,35.9569,77.376,36.0715);
            ctx.qcurve_to(77.4428,36.1861,77.4774,36.3142);
            ctx.qcurve_to(77.512,36.4423,77.512,36.575);
            ctx.line_to(77.512,50.195);
            ctx.line_to(76.512,50.195);
            ctx.line_to(75.8032,49.4896);
            ctx.line_to(79.9282,45.3446);
            ctx.line_to(80.637,46.05);
            ctx.line_to(79.637,46.05);
            ctx.line_to(79.637,31.953);
            ctx.close_path();
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xffffdc06);
            ctx.set_transform(0.714286,0,0,0.714286,15.7143,8.57143);
            ctx.begin_path();
            ctx.move_to(47.599,22.976);
            ctx.bcurve_to(47.725,24.595,50.021,27.263,51,28.186);
            ctx.bcurve_to(51.98,29.107,53.871,30.56,55,30.56);
            ctx.bcurve_to(56.129,30.56,58.02,29.107,59,28.185);
            ctx.bcurve_to(59.98,27.263,62.275,24.595,62.401,22.976);
            ctx.bcurve_to(62.527,21.358,60.433,16.607,55,16.607);
            ctx.bcurve_to(49.567,16.607,47.473,21.357,47.599,22.977);
            ctx.line_to(47.599,22.976);
            ctx.close_path();
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xffccb005);
            ctx.set_transform(0.714286,0,0,0.714286,15.7143,8.57143);
            ctx.begin_path();
            ctx.move_to(48.596,22.8984);
            ctx.qcurve_to(48.7343,24.6755,51.686,27.4584);
            ctx.qcurve_to(53.9222,29.56,55,29.56);
            ctx.qcurve_to(56.0791,29.56,58.3148,27.4567);
            ctx.qcurve_to(61.2653,24.6807,61.404,22.8984);
            ctx.qcurve_to(61.5074,21.5707,60.0246,19.8341);
            ctx.qcurve_to(58.123,17.607,55,17.607);
            ctx.qcurve_to(51.8768,17.607,49.9754,19.8339);
            ctx.qcurve_to(48.4926,21.5704,48.596,22.8995);
            ctx.line_to(47.599,22.977);
            ctx.line_to(46.599,22.977);
            ctx.line_to(46.599,22.976);
            ctx.qcurve_to(46.599,22.8775,46.6182,22.7809);
            ctx.qcurve_to(46.6374,22.6843,46.6751,22.5933);
            ctx.qcurve_to(46.7128,22.5023,46.7675,22.4204);
            ctx.qcurve_to(46.8222,22.3385,46.8919,22.2689);
            ctx.qcurve_to(46.9615,22.1992,47.0434,22.1445);
            ctx.qcurve_to(47.1253,22.0898,47.2163,22.0521);
            ctx.qcurve_to(47.3073,22.0144,47.4039,21.9952);
            ctx.qcurve_to(47.5005,21.976,47.599,21.976);
            ctx.qcurve_to(47.6926,21.976,47.7846,21.9934);
            ctx.qcurve_to(47.8765,22.0107,47.9637,22.0449);
            ctx.qcurve_to(48.0508,22.079,48.1301,22.1287);
            ctx.qcurve_to(48.2094,22.1784,48.2781,22.242);
            ctx.qcurve_to(48.3468,22.3055,48.4025,22.3807);
            ctx.qcurve_to(48.4582,22.4559,48.499,22.5402);
            ctx.qcurve_to(48.5398,22.6244,48.5643,22.7148);
            ctx.qcurve_to(48.5887,22.8051,48.596,22.8984);
            ctx.close_path();
            ctx.move_to(46.602,23.0536);
            ctx.line_to(47.599,22.976);
            ctx.line_to(48.599,22.976);
            ctx.line_to(48.599,22.977);
            ctx.qcurve_to(48.599,23.0706,48.5816,23.1626);
            ctx.qcurve_to(48.5643,23.2545,48.5301,23.3417);
            ctx.qcurve_to(48.496,23.4288,48.4463,23.5081);
            ctx.qcurve_to(48.3966,23.5874,48.333,23.6561);
            ctx.qcurve_to(48.2694,23.7248,48.1942,23.7806);
            ctx.qcurve_to(48.119,23.8363,48.0348,23.8771);
            ctx.qcurve_to(47.9505,23.9178,47.8602,23.9423);
            ctx.qcurve_to(47.7699,23.9667,47.6765,23.974);
            ctx.qcurve_to(47.5783,23.9816,47.4805,23.97);
            ctx.qcurve_to(47.3827,23.9583,47.2891,23.9278);
            ctx.qcurve_to(47.1955,23.8972,47.1096,23.849);
            ctx.qcurve_to(47.0237,23.8008,46.9488,23.7368);
            ctx.qcurve_to(46.874,23.6728,46.8131,23.5954);
            ctx.qcurve_to(46.7522,23.518,46.7076,23.4302);
            ctx.qcurve_to(46.6629,23.3424,46.6363,23.2476);
            ctx.qcurve_to(46.6096,23.1527,46.602,23.0545);
            ctx.qcurve_to(46.4345,20.9007,48.4544,18.5351);
            ctx.qcurve_to(50.9546,15.607,55,15.607);
            ctx.qcurve_to(59.0452,15.607,61.5456,18.5354);
            ctx.qcurve_to(63.5656,20.9011,63.398,23.0536);
            ctx.qcurve_to(63.1992,25.6073,59.6852,28.9133);
            ctx.qcurve_to(56.8721,31.56,55,31.56);
            ctx.qcurve_to(53.1299,31.56,50.314,28.9136);
            ctx.qcurve_to(46.8003,25.6008,46.602,23.0536);
            ctx.close_path();
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xffccb005);
            ctx.set_transform(0.714286,0,0,0.714286,15.7143,8.57143);
            ctx.begin_path();
            ctx.move_to(49.885,20.07);
            ctx.qcurve_to(49.885,18.3384,51.1565,17.0588);
            ctx.qcurve_to(52.5991,15.607,55,15.607);
            ctx.qcurve_to(57.4001,15.607,58.843,17.0585);
            ctx.qcurve_to(60.115,18.3381,60.115,20.069);
            ctx.qcurve_to(60.115,21.6816,58.4598,23.2552);
            ctx.qcurve_to(56.7897,24.843,55,24.843);
            ctx.qcurve_to(53.2103,24.843,51.5402,23.2552);
            ctx.qcurve_to(49.885,21.6816,49.885,20.069);
            ctx.line_to(50.885,20.069);
            ctx.line_to(51.885,20.0728);
            ctx.line_to(51.885,20.0738);
            ctx.qcurve_to(51.8846,20.1723,51.865,20.2688);
            ctx.qcurve_to(51.8454,20.3654,51.8074,20.4562);
            ctx.qcurve_to(51.7694,20.5471,51.7143,20.6287);
            ctx.qcurve_to(51.6593,20.7104,51.5894,20.7798);
            ctx.qcurve_to(51.5195,20.8492,51.4374,20.9036);
            ctx.qcurve_to(51.3553,20.958,51.2641,20.9953);
            ctx.qcurve_to(51.173,21.0327,51.0763,21.0515);
            ctx.qcurve_to(50.9797,21.0704,50.8812,21.07);
            ctx.qcurve_to(50.7829,21.0696,50.6866,21.0501);
            ctx.qcurve_to(50.5903,21.0306,50.4997,20.9928);
            ctx.qcurve_to(50.409,20.9549,50.3275,20.9001);
            ctx.qcurve_to(50.2459,20.8454,50.1765,20.7758);
            ctx.qcurve_to(50.1072,20.7062,50.0527,20.6244);
            ctx.qcurve_to(49.9983,20.5426,49.9608,20.4518);
            ctx.qcurve_to(49.9232,20.361,49.9041,20.2646);
            ctx.qcurve_to(49.885,20.1683,49.885,20.07);
            ctx.close_path();
            ctx.move_to(51.885,20.07);
            ctx.line_to(50.885,20.07);
            ctx.line_to(49.885,20.0662);
            ctx.line_to(49.885,20.0652);
            ctx.qcurve_to(49.8854,19.9669,49.9049,19.8706);
            ctx.qcurve_to(49.9244,19.7743,49.9622,19.6837);
            ctx.qcurve_to(50.0001,19.593,50.0549,19.5114);
            ctx.qcurve_to(50.1096,19.4299,50.1792,19.3605);
            ctx.qcurve_to(50.2489,19.2912,50.3306,19.2367);
            ctx.qcurve_to(50.4124,19.1823,50.5032,19.1448);
            ctx.qcurve_to(50.594,19.1072,50.6904,19.0881);
            ctx.qcurve_to(50.7868,19.069,50.885,19.069);
            ctx.qcurve_to(50.9835,19.069,51.0801,19.0882);
            ctx.qcurve_to(51.1767,19.1074,51.2677,19.1451);
            ctx.qcurve_to(51.3587,19.1828,51.4406,19.2375);
            ctx.qcurve_to(51.5225,19.2922,51.5921,19.3619);
            ctx.qcurve_to(51.6617,19.4315,51.7165,19.5134);
            ctx.qcurve_to(51.7712,19.5953,51.8089,19.6863);
            ctx.qcurve_to(51.8466,19.7773,51.8658,19.8739);
            ctx.qcurve_to(51.885,19.9705,51.885,20.069);
            ctx.qcurve_to(51.885,20.8234,52.9183,21.8058);
            ctx.qcurve_to(54.0093,22.843,55,22.843);
            ctx.qcurve_to(55.9907,22.843,57.0817,21.8058);
            ctx.qcurve_to(58.115,20.8234,58.115,20.069);
            ctx.qcurve_to(58.115,19.1631,57.4245,18.4685);
            ctx.qcurve_to(56.5682,17.607,55,17.607);
            ctx.qcurve_to(51.885,17.607,51.885,20.07);
            ctx.close_path();
            ctx.fill();
            ctx.stroke();
            ctx.set_fill(0xffccb005);
            ctx.set_transform(0.714286,0,0,0.714286,15.7143,8.57143);
            ctx.begin_path();
            ctx.move_to(52.7363,21.9663);
            ctx.qcurve_to(53.3898,29.56,55,29.56);
            ctx.qcurve_to(56.6102,29.56,57.2637,21.9663);
            ctx.qcurve_to(57.2721,21.8681,57.2995,21.7735);
            ctx.qcurve_to(57.327,21.6789,57.3723,21.5915);
            ctx.qcurve_to(57.4177,21.5041,57.4792,21.4272);
            ctx.qcurve_to(57.5408,21.3503,57.6161,21.2869);
            ctx.qcurve_to(57.6915,21.2235,57.7778,21.176);
            ctx.qcurve_to(57.864,21.1285,57.9579,21.0987);
            ctx.qcurve_to(58.0518,21.069,58.1497,21.0581);
            ctx.qcurve_to(58.2476,21.0472,58.3457,21.0557);
            ctx.qcurve_to(58.4439,21.0641,58.5385,21.0916);
            ctx.qcurve_to(58.633,21.119,58.7205,21.1643);
            ctx.qcurve_to(58.8079,21.2097,58.8848,21.2712);
            ctx.qcurve_to(58.9617,21.3328,59.0251,21.4081);
            ctx.qcurve_to(59.0885,21.4835,59.136,21.5698);
            ctx.qcurve_to(59.1835,21.656,59.2133,21.7499);
            ctx.qcurve_to(59.243,21.8438,59.2539,21.9417);
            ctx.qcurve_to(59.2648,22.0396,59.2563,22.1377);
            ctx.qcurve_to(58.4455,31.56,55,31.56);
            ctx.qcurve_to(51.5545,31.56,50.7437,22.1377);
            ctx.qcurve_to(50.7352,22.0396,50.7461,21.9417);
            ctx.qcurve_to(50.757,21.8438,50.7867,21.7499);
            ctx.qcurve_to(50.8165,21.656,50.864,21.5698);
            ctx.qcurve_to(50.9115,21.4835,50.9749,21.4081);
            ctx.qcurve_to(51.0383,21.3328,51.1152,21.2712);
            ctx.qcurve_to(51.1921,21.2097,51.2795,21.1643);
            ctx.qcurve_to(51.3669,21.119,51.4615,21.0916);
            ctx.qcurve_to(51.5561,21.0641,51.6543,21.0557);
            ctx.qcurve_to(51.7524,21.0472,51.8503,21.0581);
            ctx.qcurve_to(51.9482,21.069,52.0421,21.0987);
            ctx.qcurve_to(52.136,21.1285,52.2222,21.176);
            ctx.qcurve_to(52.3085,21.2235,52.3839,21.2869);
            ctx.qcurve_to(52.4592,21.3503,52.5208,21.4272);
            ctx.qcurve_to(52.5823,21.5041,52.6277,21.5915);
            ctx.qcurve_to(52.673,21.6789,52.7004,21.7735);
            ctx.qcurve_to(52.7279,21.8681,52.7363,21.9663);
            ctx.close_path();
            ctx.fill();
            ctx.stroke();
            break;
        case PetalID::kCorruption:
            ctx.set_fill(0xffcf235f);
            ctx.move_to(0.26, -23);
            ctx.partial_arc(0.2410425265718459, 3.36, 26.36, -1.5700771509579343, -1.69406129780568, true);

            // 曲线路径
            ctx.bcurve_to(-7.74, -22.2, -12, -20.2, -15.56, -16.8);
            ctx.bcurve_to(-18.38, -14.02, -20.26, -10.58, -20.7, -6.42);
            ctx.bcurve_to(-21.22, -1.4, -19.64, 3.6, -16.42, 6.4);
            ctx.bcurve_to(-15.38, 7.52, -14.94, 8.62, -14.96, 10.2);
            ctx.bcurve_to(-15, 12.7, -14.82, 15.2, -14.7, 17.86);
            ctx.bcurve_to(-11.5, 15.96, -8.42, 14.16, -5.3, 12.32);
            ctx.bcurve_to(-3.44, 15.58, -1.64, 18.76, 0.24, 22.04);
            ctx.bcurve_to(2.08, 18.78, 3.88, 15.62, 5.68, 12.4);
            ctx.bcurve_to(8.68, 14.2, 11.64, 15.96, 14.7, 17.8);
            ctx.bcurve_to(14.78, 15.22, 14.96, 13.3, 14.88, 10.42);
            ctx.bcurve_to(14.82, 8.74, 15.16, 7.42, 16.44, 6.42);
            ctx.bcurve_to(16.84, 6.1, 17.16, 5.6, 17.48, 5.16);
            ctx.bcurve_to(20.62, 0.82, 21.7, -4.02, 20.1, -9.36);
            ctx.bcurve_to(18.62, -14.3, 15.42, -17.66, 11.34, -20.06);
            ctx.bcurve_to(-0.16, -23.02, -0.88, -23.02, -0.72, -23.02);

            // 小曲线路径 1
            ctx.move_to(12.88, -7);
            ctx.bcurve_to(15.62, -7.02, 16.86, -5.32, 16.28, -2.36);
            ctx.bcurve_to(15.62, 1.04, 12.8, 3.52, 9.78, 3.36);
            ctx.bcurve_to(6.52, 3.18, 3.88, 0.5, 3.54, -3);
            ctx.bcurve_to(3.52, -3.28, 3.6, -3.7, 3.78, -3.84);
            ctx.bcurve_to(5.4, -5.14, 10.74, -6.98, 12.86, -7);

            // 小曲线路径 2
            ctx.move_to(-12.28, -7);
            ctx.bcurve_to(-10.2, -6.86, -7.8, -5.86, -5.42, -4.74);
            ctx.bcurve_to(-5.06, -1.56, -4.74, -1.56, -4.38, 0.22);
            ctx.bcurve_to(-3.48, 0.02, -3.44, 1.32, -3.56, 1.46);
            ctx.bcurve_to(-4.14, 2.16, -7.06, 4.46, -10.1, 4.3);
            ctx.bcurve_to(-13.52, 4.12, -16.12, 0.36, -16.38, -3.3);
            ctx.bcurve_to(-16.54, -5.82, -15.36, -7.08, -12.28, -7.06);

            // 小曲线路径 3
            ctx.move_to(0, 1.56);
            ctx.bcurve_to(1.14, 4.34, 2.2, 6.92, 3.28, 9.62);
            ctx.line_to(-3.28, 9.62);
            ctx.bcurve_to(-2.2, 6.94, -1.12, 4.4, 0, 1.56);

            ctx.fill();
            break;
        }
        /* case PetalID::kMagicStick:
            ctx.beginPath();
            ctx.moveTo(117.23,85.8);
            ctx.quadraticCurveTo(128.01,63.88,142.99,33.76);
            ctx.bezierCurveTo(145.09,29.54,143.73,23.83,139.51,21.35);
            ctx.bezierCurveTo(134.78,18.57,128.39,19.74,125.93,24.7);
            ctx.quadraticCurveTo(109.57,57.6,93.8,89.54);
            ctx.translate(91.43242131556745,88.31735529631383);
            ctx.rotate(1.5236724369910497);
            ctx.scale(1,0.977859778597786);
            ctx.arc(0,0,2.71,-1.0566245418067925,-0.5162098493154554,0);
            ctx.scale(1,1.0226415094339623);
            ctx.rotate(-1.5236724369910497);
            ctx.translate(-91.43242131556745,-88.31735529631383);
            ctx.quadraticCurveTo(45.64,120.91,44.37,121.67);
            ctx.bezierCurveTo(39.13,124.8,36.3,127.83,37.36,133.72);
            ctx.bezierCurveTo(38.18,138.31,43.11,141.63,47.58,141.3);
            ctx.quadraticCurveTo(49.99,141.12,55.11,137.81);
            ctx.quadraticCurveTo(57.73,136.12,103.46,106.76);
            ctx.translate(104.89595484362434,108.8437231235106);
            ctx.rotate(0.4625122517784973);
            ctx.scale(1,0.9686274509803923);
            ctx.arc(0,0,2.55,-2.6230934826232484,-2.0901888739276835,0);
            ctx.scale(1,1.0323886639676112);
            ctx.rotate(-0.4625122517784973);
            ctx.translate(-104.89595484362434,-108.8437231235106);
            ctx.lineTo(154.44,103.72);
            ctx.translate(154.2415591873737,101.33049815032493);
            ctx.rotate(0.5585053606381855);
            ctx.scale(1,0.9673469387755101);
            ctx.arc(0,0,2.45,0.9452717331198649,0.6257531795497107,1);
            ctx.scale(1,1.0337552742616034);
            ctx.rotate(-0.5585053606381855);
            ctx.translate(-154.2415591873737,-101.33049815032493);
            ctx.quadraticCurveTo(160.8,101.45,161.98,97.2);
            ctx.bezierCurveTo(163.77,90.76,159.57,84.17,152.98,84.49);
            ctx.quadraticCurveTo(136.35,85.28,117.58,86.33);
            ctx.translate(117.56343843983282,85.96037084161983);
            ctx.rotate(0);
            ctx.arc(0,0,0.37,1.5260203931092504,3.589893275916031,0);
            ctx.rotate(0);
            ctx.translate(-117.56343843983282,-85.96037084161983);
            ctx.fill();
            ctx.stroke();
            ctx.restore();
            ctx.save();
            ctx.fillStyle="#34b7c5";
            ctx.font="   15px ''";
            ctx.beginPath();
            ctx.moveTo(139.82,72.08);
            ctx.lineTo(153.33,71.38);
            ctx.translate(153.23232414655715,71.72047906590248);
            ctx.rotate(-0.5532693728822025);
            ctx.scale(1,0.6304347826086956);
            ctx.arc(0,0,0.46,-0.9647777517403144,-0.626565461250685,0);
            ctx.scale(1,1.5862068965517244);
            ctx.rotate(0.5532693728822025);
            ctx.translate(-153.23232414655715,-71.72047906590248);
            ctx.quadraticCurveTo(169.95,73.03,174.87,88.81);
            ctx.translate(172.5957450410191,89.37591428607168);
            ctx.rotate(0.6632251157578453);
            ctx.scale(1,0.9385245901639344);
            ctx.arc(0,0,2.44,-0.93764166337086,-0.6328192576621399,0);
            ctx.scale(1,1.0655021834061136);
            ctx.rotate(-0.6632251157578453);
            ctx.translate(-172.5957450410191,-89.37591428607168);
            ctx.lineTo(174.96,98.84);
            ctx.translate(172.88101676972047,98.86882756437113);
            ctx.rotate(-0.6527531402458793);
            ctx.scale(1,0.9856459330143542);
            ctx.arc(0,0,2.09,0.6458230031166913,0.9241057268355335,0);
            ctx.scale(1,1.0145631067961163);
            ctx.rotate(0.6527531402458793);
            ctx.translate(-172.88101676972047,-98.86882756437113);
            ctx.quadraticCurveTo(171.47,110.91,161.24,115.09);
            ctx.quadraticCurveTo(156.99,116.83,148.54,117.12);
            ctx.quadraticCurveTo(129.28,117.77,108.73,119.09);
            ctx.translate(108.9929771758212,121.81839818190367);
            ctx.rotate(0.4520402762665313);
            ctx.scale(1,0.9714285714285715);
            ctx.arc(0,0,2.8,-2.106119121904744,-2.6074202056795213,1);
            ctx.scale(1,1.0294117647058822);
            ctx.rotate(-0.4520402762665313);
            ctx.translate(-108.9929771758212,-121.81839818190367);
            ctx.quadraticCurveTo(65.3,146.41,61.45,148.99);
            ctx.quadraticCurveTo(55.62,152.9,51.71,153.61);
            ctx.bezierCurveTo(41.93,155.37,32.6,151.76,27.46,143.06);
            ctx.bezierCurveTo(22.22,134.2,23.51,123.54,30.43,116.01);
            ctx.quadraticCurveTo(32.42,113.85,38.44,109.99);
            ctx.quadraticCurveTo(54.14,99.94,82.75,81.58);
            ctx.translate(80.93723233288833,78.62602039182735);
            ctx.rotate(1.5219271077390555);
            ctx.scale(1,0.9827586206896551);
            ctx.arc(0,0,3.48,-0.5089068095709874,-1.0598468143626874,1);
            ctx.scale(1,1.0175438596491229);
            ctx.rotate(-1.5219271077390555);
            ctx.translate(-80.93723233288833,-78.62602039182735);
            ctx.quadraticCurveTo(109.27,29.26,111.67,24.26);
            ctx.quadraticCurveTo(115.96,15.36,118.85,12.96);
            ctx.bezierCurveTo(123.76,8.89,129.8,6.15,136.52,7.02);
            ctx.quadraticCurveTo(150.7,8.86,155.67,22.25);
            ctx.bezierCurveTo(158.39,29.58,156.61,35.43,152.79,43.02);
            ctx.quadraticCurveTo(144.86,58.78,139.06,70.95);
            ctx.translate(139.77240589478706,71.29143497341755);
            ctx.rotate(0);
            ctx.arc(0,0,0.79,-2.694665921812874,-4.772671186917323,1);
            ctx.rotate(0);
            ctx.translate(-139.77240589478706,-71.29143497341755);
            ctx.closePath();
            ctx.moveTo(117.23,85.8);
            ctx.quadraticCurveTo(128.01,63.88,142.99,33.76);
            ctx.bezierCurveTo(145.09,29.54,143.73,23.83,139.51,21.35);
            ctx.bezierCurveTo(134.78,18.57,128.39,19.74,125.93,24.7);
            ctx.quadraticCurveTo(109.57,57.6,93.8,89.54);
            ctx.translate(91.43242131556745,88.31735529631383);
            ctx.rotate(1.5236724369910497);
            ctx.scale(1,0.977859778597786);
            ctx.arc(0,0,2.71,-1.0566245418067925,-0.5162098493154554,0);
            ctx.scale(1,1.0226415094339623);
            ctx.rotate(-1.5236724369910497);
            ctx.translate(-91.43242131556745,-88.31735529631383);
            ctx.quadraticCurveTo(45.64,120.91,44.37,121.67);
            ctx.bezierCurveTo(39.13,124.8,36.3,127.83,37.36,133.72);
            ctx.bezierCurveTo(38.18,138.31,43.11,141.63,47.58,141.3);
            ctx.quadraticCurveTo(49.99,141.12,55.11,137.81);
            ctx.quadraticCurveTo(57.73,136.12,103.46,106.76);
            ctx.translate(104.89595484362434,108.8437231235106);
            ctx.rotate(0.4625122517784973);
            ctx.scale(1,0.9686274509803923);
            ctx.arc(0,0,2.55,-2.6230934826232484,-2.0901888739276835,0);
            ctx.scale(1,1.0323886639676112);
            ctx.rotate(-0.4625122517784973);
            ctx.translate(-104.89595484362434,-108.8437231235106);
            ctx.lineTo(154.44,103.72);
            ctx.translate(154.2415591873737,101.33049815032493);
            ctx.rotate(0.5585053606381855);
            ctx.scale(1,0.9673469387755101);
            ctx.arc(0,0,2.45,0.9452717331198649,0.6257531795497107,1);
            ctx.scale(1,1.0337552742616034);
            ctx.rotate(-0.5585053606381855);
            ctx.translate(-154.2415591873737,-101.33049815032493);
            ctx.quadraticCurveTo(160.8,101.45,161.98,97.2);
            ctx.bezierCurveTo(163.77,90.76,159.57,84.17,152.98,84.49);
            ctx.quadraticCurveTo(136.35,85.28,117.58,86.33);
            ctx.translate(117.56343843983282,85.96037084161983);
            ctx.rotate(0);
            ctx.arc(0,0,0.37,1.5260203931092504,3.589893275916031,0);
            ctx.rotate(0);
            ctx.translate(-117.56343843983282,-85.96037084161983);
            ctx.closePath();
            ctx.fill();
            ctx.stroke();
            ctx.restore();
            ctx.save();
            ctx.fillStyle="#42e2f4";
            ctx.font="   15px ''";
            ctx.beginPath();
            ctx.moveTo(117.23,85.8);
            ctx.translate(117.56343843983282,85.96037084161983);
            ctx.rotate(0);
            ctx.arc(0,0,0.37,-2.6932920312635558,-4.757164914070336,1);
            ctx.rotate(0);
            ctx.translate(-117.56343843983282,-85.96037084161983);
            ctx.quadraticCurveTo(136.35,85.28,152.98,84.49);
            ctx.bezierCurveTo(159.57,84.17,163.77,90.76,161.98,97.2);
            ctx.quadraticCurveTo(160.8,101.45,155.19,103.56);
            ctx.translate(154.2415591873737,101.33049815032493);
            ctx.rotate(0.5585053606381855);
            ctx.scale(1,0.9673469387755101);
            ctx.arc(0,0,2.45,0.6257531795497102,0.9452717331198646,0);
            ctx.scale(1,1.0337552742616034);
            ctx.rotate(-0.5585053606381855);
            ctx.translate(-154.2415591873737,-101.33049815032493);
            ctx.lineTo(104.72,106.36);
            ctx.translate(104.89595484362434,108.8437231235106);
            ctx.rotate(0.4625122517784973);
            ctx.scale(1,0.9686274509803923);
            ctx.arc(0,0,2.55,-2.0901888739276835,-2.6230934826232484,1);
            ctx.scale(1,1.0323886639676112);
            ctx.rotate(-0.4625122517784973);
            ctx.translate(-104.89595484362434,-108.8437231235106);
            ctx.quadraticCurveTo(57.73,136.12,55.11,137.81);
            ctx.quadraticCurveTo(49.99,141.12,47.58,141.3);
            ctx.bezierCurveTo(43.11,141.63,38.18,138.31,37.36,133.72);
            ctx.bezierCurveTo(36.3,127.83,39.13,124.8,44.37,121.67);
            ctx.quadraticCurveTo(45.64,120.91,92.85,90.61);
            ctx.translate(91.43242131556745,88.31735529631383);
            ctx.rotate(1.5236724369910497);
            ctx.scale(1,0.977859778597786);
            ctx.arc(0,0,2.71,-0.5162098493154548,-1.0566245418067919,1);
            ctx.scale(1,1.0226415094339623);
            ctx.rotate(-1.5236724369910497);
            ctx.translate(-91.43242131556745,-88.31735529631383);
            ctx.quadraticCurveTo(109.57,57.6,125.93,24.7);
            ctx.bezierCurveTo(128.39,19.74,134.78,18.57,139.51,21.35);
            ctx.bezierCurveTo(143.73,23.83,145.09,29.54,142.99,33.76);
            ctx.quadraticCurveTo(128.01,63.88,117.23,85.8);
            ctx.closePath();
            ctx.fill();
            ctx.stroke();
            ctx.restore();
            ctx.restore(); */
        #endif
        default:
            assert(id < PetalID::kNumPetals);
            assert(!"didn't cover petal render");
            break;
    }
}

void draw_static_petal(PetalID::T id, Renderer &ctx) {
    struct PetalData const &data = PETAL_DATA[id];
    uint32_t count = data.count;
    if (count == 0) count = 1;
    for (uint32_t i = 0; i < count; ++i) {
        RenderContext context(&ctx);
        float rad = 10;
        if (data.attributes.clump_radius != 0)
            rad = data.attributes.clump_radius;
        ctx.rotate(i * 2 * M_PI / data.count);
        if (data.count > 1) ctx.translate(rad, 0);
        ctx.rotate(data.attributes.icon_angle);
        draw_static_petal_single(id, ctx);
    }
}

void draw_loadout_background(Renderer &ctx, uint8_t id, float reload) {
    RenderContext c(&ctx);

    if (PETAL_DATA[id].rarity >= RarityID::kMythic) {
        const int glow_layers = 10;
        const float glow_max_size = 15.0f;
        const float glow_brightness = 1.8f;

        ctx.set_stroke(Renderer::HSV(RARITY_COLORS[PETAL_DATA[id].rarity], 0.8));
        ctx.round_line_join();
        ctx.round_line_cap();

        for (int i = glow_layers; i > 0; --i) {
            RenderContext r(&ctx);
            
            float ratio = (float)i / glow_layers;
            ctx.set_line_width(ratio * glow_max_size);
            ctx.set_global_alpha(ratio * ratio * glow_brightness / glow_layers);

            ctx.begin_path();
            ctx.round_rect(-30, -30, 60, 60, 3);
            ctx.stroke();
        }
    }

    ctx.set_fill(Renderer::HSV(RARITY_COLORS[PETAL_DATA[id].rarity], 0.8));
    ctx.round_line_join();
    ctx.round_line_cap();
    ctx.begin_path();
    ctx.round_rect(-30, -30, 60, 60, 3);
    ctx.fill();
    ctx.set_fill(RARITY_COLORS[PETAL_DATA[id].rarity]);
    ctx.begin_path();
    ctx.rect(-25, -25, 50, 50);
    ctx.fill();
    #ifdef DEV
    {
        RenderContext r(&ctx);
        ctx.translate(-30, -25);
        ctx.draw_text(std::to_string(id).c_str(), { .size = 18 }); 
    }
    #endif
    ctx.clip();
    if (reload < 1) {
        float rld =  1 - (float) reload;
        {
            rld = rld * rld * rld * (rld * (6.0f * rld - 15.0f) + 10.0f);
            RenderContext context(&ctx);
            ctx.set_fill(0x40000000);
            ctx.begin_path();
            ctx.move_to(0,0);
            ctx.partial_arc(0, 0, 90, -M_PI / 2 - rld * M_PI * 10, -M_PI / 2 - rld * M_PI * 8, 0);
            ctx.fill();
        }
    }
    ctx.translate(0, -5);
    {
        RenderContext r(&ctx);
        ctx.scale(0.833);
        if (PETAL_DATA[id].radius > 20) ctx.scale(20 / PETAL_DATA[id].radius);
        draw_static_petal(id, ctx);
    }
    float text_width = 12 * Renderer::get_ascii_text_size(PETAL_DATA[id].name);
    if (text_width < 50) text_width = 12;
    else text_width = 12 * 50 / text_width;
    ctx.translate(0, 20);
    ctx.draw_text(PETAL_DATA[id].name, { .size = text_width });
}